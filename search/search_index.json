{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Introducing AppControl"},{"location":"#focused-on-what-really-mattersyour-applications","title":"Focused on What Really Matters\u2014Your Applications","text":"For small and mid-sized enterprises, the performance and availability of your applications are critical to your business success. That\u2019s why **AppControl** is designed to minimize downtime by enabling fast, automated responses to incidents directly within your applications\u2014whether they are legacy systems or modern cloud-based apps. Unlike many solutions, **AppControl integrates without requiring any modifications to your existing applications**, ensuring a smooth deployment without risking your critical systems.  While many traditional monitoring solutions focus primarily on servers, networks, and infrastructure, **AppControl takes a different approach**. We follow the lifeblood of your business: your applications. Whether it's restarting services, executing custom tasks, or applying real-time fixes, AppControl gives you the power to keep your applications running smoothly\u2014without the complexity and overhead of traditional tools that often require a full infrastructure overhaul."},{"location":"#what-makes-appcontrol-different-from-other-solutions","title":"What Makes AppControl Different from Other Solutions","text":"<ul> <li>No modifications required: Unlike other tools, AppControl integrates directly with your existing applications, whether legacy or cloud-based, without needing any changes to their structure.</li> <li>Application-Centric Approach: While many competing solutions focus on infrastructure (servers, networks), AppControl is designed specifically to monitor, manage, and automate your applications, which are the core of your business.</li> <li>Hybrid Environment Management: Whether you operate on-premise systems or in the cloud, AppControl provides seamless integration and centralized management for applications across complex environments.</li> <li>Real-time automation: With AppControl, responses to incidents are automated and intelligent, eliminating human error and reducing downtime.</li> <li>Ease of Use: Unlike traditional tools, no complex setup is required. AppControl is easy to install, use, and scale with your growing needs.</li> <li>Target audience: AppControl is ideal for small and mid-sized enterprises looking for an application management solution without the complexity of large-scale orchestration tools.</li> </ul>"},{"location":"#key-benefits-of-appcontrol","title":"Key Benefits of AppControl","text":"<ul> <li>Application-Centric: Focus on what matters most\u2014your applications, not the underlying infrastructure.</li> <li>Automated Responses: Automates incident responses for both legacy and cloud-native applications.</li> <li>No Modifications Required: Integrate your existing systems without any changes.</li> <li>Real-Time Control: Act instantly when issues arise, minimizing impact on your business.</li> <li>Ease of Deployment: Simple installation with quick configuration and minimal effort.</li> <li>Scalable: Adapts to the needs of your business as it grows.</li> </ul>"},{"location":"#why-choose-appcontrol","title":"Why Choose AppControl?","text":"<p>AppControl is specifically designed for businesses that:</p> <ul> <li>Operate in hybrid environments and want to modernize their systems without altering their existing infrastructure.</li> <li>Don\u2019t need the complexity of traditional infrastructure-focused solutions and are looking for a simple, effective, application-centric management tool.</li> <li>Prioritize application availability and performance over focusing solely on infrastructure.</li> </ul> <p>With AppControl, you\u2019re not just notified of issues\u2014you\u2019re equipped to solve them, ensuring the continuous operation of your critical applications and minimizing the impact of disruptions on your business. It\u2019s the ideal solution for companies that want to modernize without compromise and focus on what truly matters: their applications.</p> <p>Ready to take control of your application reliability? Request a demo or Start a free trial today.</p>"},{"location":"agentazure/","title":"Agentazure","text":""},{"location":"agentazure/#docker-image-for-gateway-agent-and-azure-cli-deployment-in-azure","title":"Docker Image for Gateway, Agent, and Azure CLI Deployment in Azure","text":"<p>To simplify the deployment of AppControl\u2019s gateway and agent in Azure, a pre-configured Docker image is available. This image includes:</p> <ul> <li>AppControl Gateway</li> <li>AppControl Agent</li> <li>Azure CLI (az cli)</li> </ul> <p>The goal is to streamline the process of deploying and managing the agent and gateway in an Azure environment. By running this Docker container in Managed Identity, the agent will have the capability to execute Azure CLI commands without requiring additional authentication.</p> <p>Key Benefits</p> <ul> <li> <p>Pre-configured Environment: The Docker image includes both the gateway and the agent, along with the Azure CLI, in one cohesive package. This eliminates the need to install and configure each component separately.</p> </li> <li> <p>Managed Identity Integration: When the Docker container is run with a managed identity, the agent gains access to Azure resources without manual authentication. This allows the agent to execute az commands securely, inheriting the permissions associated with the managed identity.</p> </li> <li> <p>Seamless Deployment: This image is designed to be used within Azure environments, simplifying the process of deploying the gateway and agent directly in the cloud. You can use the image to monitor and manage your applications and infrastructure easily.</p> </li> </ul>"},{"location":"agentazure/#deploying-an-azure-container-with-a-managed-identity-using-appcontrols-docker-image","title":"Deploying an Azure Container with a Managed Identity Using AppControl\u2019s Docker Image","text":"<p>This guide will walk you through creating a dedicated resource group, setting up a managed identity, and running a container using AppControl's Docker image, which includes the gateway, agent, and Azure CLI.</p> <p>Prerequisites</p> <ul> <li>Azure CLI installed on your local machine.</li> <li>Azure account with sufficient privileges to create resource groups, managed identities, and run containers.</li> </ul> <p>Procedure</p>"},{"location":"agentazure/#1-create-a-resource-group","title":"1. Create a Resource Group","text":"<p>First, create a new resource group in Azure. This resource group will house the container and the associated resources.</p> <pre><code>az group create --name AppControlResourceGroup --location &lt;your-region&gt;\n</code></pre> <p>Replace  with the desired Azure region (e.g., eastus, westus, westeurope)."},{"location":"agentazure/#2-create-a-managed-identity","title":"2. Create a Managed Identity","text":"<p>Next, create a managed identity that will be used by the container to authenticate and execute Azure commands without requiring credentials.</p> <pre><code>az identity create --name AppControlIdentity --resource-group AppControlResourceGroup --location &lt;your-region&gt;\n</code></pre> <p>Once the managed identity is created, note down the client ID and principal ID (also referred to as the object ID) from the output.</p>"},{"location":"agentazure/#3-assign-the-managed-identity-to-a-role","title":"3. Assign the Managed Identity to a Role","text":"<p>Assign the managed identity appropriate roles so that it has permissions to interact with Azure resources. For example, to allow it to manage virtual machines, assign the Virtual Machine Contributor role.</p> <pre><code>az role assignment create --assignee &lt;principal-id&gt; --role \"Virtual Machine Contributor\" --scope /subscriptions/&lt;subscription-id&gt;/resourceGroups/AppControlResourceGroup\n</code></pre> <p>Replace:</p> <ul> <li> with the principal ID of the managed identity. <li> with your Azure subscription ID.     You can also assign different roles depending on what permissions are needed for the agent running in the container."},{"location":"agentazure/#4-create-and-configure-an-azure-container-instance","title":"4. Create and Configure an Azure Container Instance","text":"<p>Now, deploy an Azure Container Instance using the Docker image that contains the AppControl gateway, agent, and Azure CLI. Make sure to assign the managed identity to this container so it can execute Azure commands without requiring explicit credentials.</p> <pre><code>az container create \\\n  --resource-group AppControlResourceGroup \\\n  --name appcontrol-container \\\n  --image xcomponent/x4b-azuregateway:latest \\\n  --assign-identity &lt;client-id&gt; \\\n  --cpu 1 \\\n  --memory 1.5 \\\n  --environment-variables AZURE_CLIENT_ID=&lt;client-id&gt; \\\n  --location &lt;your-region&gt; \\\n  --dns-name-label appcontrol-container-instance \\\n  --resource-group [**RESOURCE-GROUP-NAME**] \\\n   --restart-policy OnFailure \\\n   --environment-variables  AZURE_CLIENT_ID=&lt;client-id&gt; X4B_ACCESS_KEY=[**YOUR-GATEWAY-ACCESS-KEY**] X4B_SECRET_ACCESS_KEY=[**YOUR-GATEWAY-SECRET-KEY**] X4B_PROXY_NAME=[**YOUR-GATEWAY-NAME**] APPCONTROL_API_URL=https://appcontrol.xcomponent.com/core/\n</code></pre> <p>Replace:</p> <ul> <li> with the client ID of the managed identity. <li> with your preferred Azure region. <p>This command will:</p> <p>Create a new container instance running the Docker image xcomponent/x4b-azuregateway:latest. Assign the managed identity to the container so that it can run Azure CLI commands using the permissions of that identity. Allocate 1 CPU and 1.5GB memory for the container.</p>"},{"location":"agentazure/#5-verify-the-container-and-managed-identity","title":"5. Verify the Container and Managed Identity","text":"<p>After running the above command, you can verify that the container is running:</p> <pre><code>az container show --resource-group AppControlResourceGroup --name appcontrol-container --query \"instanceView.state\"\n</code></pre> <p>If everything is configured correctly, the container will be in a \"Running\" state.</p>"},{"location":"agentazure/#6-running-azure-cli-commands-from-inside-the-container","title":"6. Running Azure CLI Commands from Inside the Container","text":"<p>Since the container is running with the managed identity, you can now use the Azure CLI inside the container to manage Azure resources. The managed identity provides seamless access without needing explicit authentication credentials.</p> <p>To list virtual machines, for example, you can run the following command inside the container:</p> <pre><code>az vm list --output table\n</code></pre> <p>The managed identity will use the permissions assigned to it to interact with the Azure resources as needed.</p>"},{"location":"agentazure/#7-clean-up-resources-optional","title":"7. Clean Up Resources (Optional)","text":"<p>Once you're done with the container and managed identity, you can delete the resource group and all its associated resources:</p> <pre><code>az group delete --name AppControlResourceGroup --yes --no-wait\n</code></pre> <p>This command will remove the resource group, the container, and the managed identity.</p>"},{"location":"agentazure/#conclusion","title":"Conclusion","text":"<p>By following this procedure, you can deploy a container running AppControl\u2019s gateway, agent, and Azure CLI in an Azure environment, using a managed identity for secure, password-less authentication. This setup allows the agent to execute Azure commands seamlessly, simplifying infrastructure management and monitoring.</p> <p>For more advanced configurations or additional details, refer to the official Azure and AppControl documentation.</p> <p>After the container is created and starts automatically, check its operation in Azure by examining the logs.</p> <p>Now check on AppControl to ensure the gateway is accessible.</p> <p></p> <p>You are now ready to create your map in AppControl, utilizing this gateway and agent to monitor your Azure infrastructure.</p> <p>Below is an example that supervises an Azure Function:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?&gt;\n&lt;apps&gt;\n &lt;hosts&gt;\n  &lt;host hostid=\"agent-azure\" host=\"localhost\" port=\"12567\" sslprotocol=\"Tls12\" /&gt;\n &lt;/hosts&gt;\n &lt;auths&gt;\n  &lt;auth authid=\"LOCAL\" domain=\"\" password=\"\" user=\"\" /&gt;\n &lt;/auths&gt;\n &lt;app name=\"AZURE MAP\" version=\"v1\"&gt;\n  &lt;component name=\"Azure CLI\" description=\"Azure access\" hostref=\"agent-azure\" authref=\"LOCAL\" redirectoutput=\"false\" type=\"file\"&gt;\n   &lt;action value=\"az version\" name=\"check\" /&gt;\n   &lt;action value=\"az $(command)\" commandname=\"Test az cli\" name=\"custom\"&gt;\n    &lt;parameters&gt;\n     &lt;parameter name=\"command\" value=\"account list\" canedit=\"true\" validation=\"\\*\" /&gt;\n    &lt;/parameters&gt;\n   &lt;/action&gt;\n  &lt;/component&gt;\n  &lt;component name=\"AzureFunction\" description=\"Azure Function\" hostref=\"agent-azure\" authref=\"LOCAL\" redirectoutput=\"true\" type=\"browser\"&gt;\n   &lt;father&gt;Azure&lt;/father&gt;\n   &lt;action value=\"az functionapp show --ids /subscriptions/[SUBSCRIPTION-ID]/resourceGroups/[RESOURCE-GROUP-NAME]/providers/Microsoft.Web/sites/[FUNCTION-APP-NAME] --query 'state' | grep -q '&amp;#34;Running&amp;#34;'\" name=\"check\" /&gt;\n   &lt;action value=\"az functionapp start --ids /subscriptions/[SUBSCRIPTION-ID]/resourceGroups/[RESOURCE-GROUP-NAME]/providers/Microsoft.Web/sites/[FUNCTION-APP-NAME]\" name=\"enable\" /&gt;\n   &lt;action value=\"az functionapp stop --ids /subscriptions/[SUBSCRIPTION-ID]/resourceGroups/[RESOURCE-GROUP-NAME]/providers/Microsoft.Web/sites/[FUNCTION-APP-NAME]\" name=\"disable\" /&gt;\n  &lt;/component&gt;\n &lt;/app&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"agents/","title":"Agents","text":"<p>An AppControl Agent is a key component that enables communication between your infrastructure and the AppControl gateway. It is responsible for executing commands, checking the status of components, and relaying important information to ensure smooth operation and monitoring of your applications.</p> <p>The agent is designed to be cross-platform, meaning it can be deployed on both Linux and Windows systems, offering flexibility across diverse environments. Furthermore, it is optimized to be lightweight, consuming minimal CPU and memory resources. This ensures that the agent runs efficiently in the background without impacting the performance of the host system.</p> <p>With a simple installation process and low resource footprint, AppControl Agents are an essential part of managing your applications, regardless of the platform or scale.</p>"},{"location":"agents/#latest-available-versions","title":"Latest Available versions","text":"Operating System Version Format Latest version Microsoft Windows 32 bits All Versions zip Windows Agent32 Zip Microsoft Windows 64 bits All Versions zip Windows Agent64 Zip Alpine 3.18.3 tar.gz Alpine tar.gz Alma Linux (EL) 8.8 (Compatibility with RedHat 8) tar.gz Alma8 tar.gz Alma Linux (EL) 9.2 (Compatibility with RedHat 9) tar.gz Alma9 tar.gz Rocky Linux (EL) 8.8 (Compatibility with RedHat 8) tar.gz Rocky8 Linux Rocky Linux (EL) 9.2 (Compatibility with RedHat 9) tar.gz Rocky9 Linux Debian 11.7 tar.gz Debian11 tar.gz Debian 12.1 tar.gz Debian12 tar.gz Alpine alpine:3.18.3 docker docker pull xcomponent/appcontrol-agent:latest-alpine Alma Linux (EL) almalinux:8.8-minimal (Compatibility with RedHat 8) docker docker pull xcomponent/appcontrol-agent:latest-almalinux Alma Linux (EL) almalinux:9.2-minimal (Compatibility with RedHat 9) docker docker pull xcomponent/appcontrol-agent:latest-almalinux Debian debian:11.5-slim docker docker pull xcomponent/appcontrol-agent:latest-debian Rocky Linux (EL) rockylinux:8.8-minimal (Compatibility with RedHat 8) docker docker pull xcomponent/appcontrol-agent:latest-rockylinux Rocky Linux (EL) almalinux:9.2-minimal (Compatibility with RedHat 9) docker docker pull xcomponent/appcontrol-agent:latest-rockylinux <p>All binary versions are listed here: All binaries versions</p> <p>All docker versions are listed here: All docker versions</p>"},{"location":"agents/#microsoft-windows-platform","title":"Microsoft Windows Platform","text":"<p>Note:</p> <pre><code>We recommand to use cmd.exe as a shell to install the agent. We don't offer the support for installation through powershell.\n</code></pre> <p>To install XComponent AppControl Agent under Windows OS, unzip the following file into an installation directory. The configuration file ( config.dat ) is located in the same directory. Refer to the agent configuration section to customize the configuration. You have 2 options:</p> <ul> <li>Install an run the agent as a Microsoft Windows Service</li> <li>Run the agent in interactive mode (in a cmd.exe)</li> </ul>"},{"location":"agents/#option-1-install-and-start-the-agent-as-a-microsoft-windows-service","title":"Option 1. Install and start the agent as a Microsoft Windows Service","text":"<ul> <li>To register the program in the service registry of the Microsoft\ufffd Windows machine execute the following command in a prompt (cmd.exe) with administrative permissions:</li> </ul> <pre><code>C:\\appcontrol&gt;xcAgent --install --servicename XComponentAppControlAgent\nXComponent App Control Agent, version 9.9\nCopyright \u00a9 Invivoo Software 2022\nXComponent AppControl service name: XComponentAppControlAgentXComponent AppControl service display name: XComponent AppControl AgentXComponentAppControlAgent is installed.\n</code></pre> <ul> <li>We can either specify the display service name during registration:</li> </ul> <pre><code>C:\\appcontrol&gt;xcAgent.exe --install --servicename appcontrolagent --servicedisplayname \"Agent AppControl\"\nXComponent App Control Agent, version 9.9\nCopyright \u00a9 Invivoo Software 2022\nXComponent App Control service name: appcontrolagent\nXComponent App Control service display name: Agent AppControl\nappcontrolagent is installed.\n</code></pre> <ul> <li>Uninstalling the agent can be done also with the following command line:</li> </ul> <pre><code>C:\\appcontrol&gt;xcAgent.exe --uninstall --servicename appcontrolagent\nXComponent App Control Agent, version 9.9\nCopyright \u00a9 Invivoo Software 2022\nappcontrolagent has been uninstalled.\n</code></pre> <ul> <li>Start the service XComponent AppControl Agent</li> </ul>"},{"location":"agents/#option-2-run-the-agent-in-interactive-mode-from-a-prompt-cmdexe","title":"Option 2. Run the agent in interactive mode from a prompt (cmd.exe)","text":"<p>Run cmd.exe and then go to the agent folder.</p> <pre><code>C:\\appcontrol&gt;xcAgent.exe --console\nXComponent AppControl Agent, version 7.0.0-R1\nCopyright \u00a9 Invivoo Software 2022\n\n</code></pre>"},{"location":"agents/#adding-a-microsoft-windows-firewall-port-rule-optional-step","title":"Adding a Microsoft Windows firewall port rule (optional step)","text":"<p>If you need to communicate with the agent from another computer, you should need to create a firewall rule to open the agent's port.</p> <p>In this case the agent's port is 12567, the command above creates the correct rule on the firewall.</p> <p>Run cmd.exe (with Administrative permissions) and then execute the following command.</p> <pre><code>C:\\&gt;netsh advfirewall firewall add rule name=\"AppControl-AgentRule\" dir=in action=allow protocol=TCP localport=12567\n\n</code></pre> <p>You can check that the rule is correctly created with this command:</p> <pre><code>C:\\&gt;netsh advfirewall firewall show rule name=\"AppControl-AgentRule\"\n</code></pre> <p>Please refer to the following link to check if the agent port is reachable.</p> <p>Note:</p> <pre><code>If you are using another firewall or and anti-virus, you should refer to the corresponding documentation.\n</code></pre>"},{"location":"agents/#enterprise-linux","title":"Enterprise Linux","text":"<p>At the moment EL versions of XComponent AppControl Agent are Rocky Linux and Alma Linux.</p> <p>To install XComponent AppControl Agent under EL, untar the following Alma tar.gz into an installation directory (Tarball file). The configuration file ( config.dat ) is located in the same directory. Refer to the agent configuration section to customize the configuration.</p> <p>Replace /home/xc/xcagent with your own installation folder.</p> <pre><code>/home/xc/xcagent $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/xc/xcagent/libs\n/home/xc/xcagent $ ./xcAgent.bin --file /home/xc/xcagent/config.dat\n\nXComponent AppControl Agent, version 7.0.0-R1\nCopyright \ufffd Invivoo Software 2022\n\n</code></pre>"},{"location":"agents/#agentless-linux-unix","title":"Agentless Linux &amp; Unix","text":"<p>From an XComponent AppControl Linux agent, you can enable AgentLess mode via SSH2. This mode allows a Linux XComponent AppControl Agent to forward actions provided by the AppControl server under a non permanent Ssh channel to the IP address and account configured in the agent configuration file. Refer to the agent configuration section to customize the configuration.</p>"},{"location":"agents/#docker-installation","title":"Docker Installation","text":"<p>The docker image of the agent is available here on docker hub.</p> <p>You can pull the docker image using the following command line:</p> <pre><code>root $ docker pull xcomponent/appcontrol-agent:latest\n</code></pre> <p>Environment variables exposed by the docker image are the following:</p> Variable Description CONFIG_FILE_PATH Path to the config.dat TRUSTED_SERVERS List of IP addresses, or Dns names of XComponent AppControl servers authorized to contact the agent (Can be empty) LOG_LEVEL Log levels ('NONE', 'ERROR', 'INFO', 'TRACE') PORT Default value: 12567. Port used as the agent's TCP listening port. Numerical format. NB_DAYS_TO_DELETE_LOGS Default value: 0. Retention period for trace files archived under logdirectory /logs-backup/ (In number of days) LOG_STANDARD_OUTPUT Default value: true. Boolean value (true or false). If true redirect all the logs to std output <p>Some Technicals Points:</p> <ol> <li>If your agent needs to access to local resources (eg: scripts), you have 2 ways to achieve this:<ul> <li>Inherits from this docker image and create your own image</li> <li>Or you can map a directory to the docker image</li> </ul> </li> </ol> <p>Running the docker image:</p> <pre><code>root $ docker run -p 12567:12567 xcomponent/appcontrol-agent:latest\n</code></pre>"},{"location":"agents/#agent-configuration","title":"Agent Configuration","text":"<p>The default configuration file is name config.dat. It's located near the XComponent AppControl Agent configuration file.</p> <pre><code>&lt;config&gt;\n  &lt;item key=\"networkAddress\"     value=\"127.0.0.1\" /&gt;\n  &lt;item key=\"port\"               value=\"12567\" /&gt;\n  &lt;item key=\"checktimeout\"       value=\"20\" /&gt;\n  &lt;item key=\"logdirectory\"       value=\"log\" /&gt;\n  &lt;item key=\"tempdirectory\"      value=\"tmp\" /&gt;\n  &lt;item key=\"maxlogsizeinmo\"     value=\"5\" /&gt;\n  &lt;item key=\"nbdaystodeletelogs\" value=\"10\" /&gt;\n  &lt;item key=\"executionthreshold\" value=\"30\" /&gt;\n  &lt;!--Log level : NONE, INFO, TRACE, ERROR --&gt;\n  &lt;item key=\"loglevel\"           value=\"INFO\" /&gt;\n  &lt;item key=\"trustedservers\"     value=\"127.0.0.1\" /&gt;\n  &lt;item key=\"sshhost\"            value=\"127.0.0.1\" /&gt;\n  &lt;item key=\"sshkeydirectory\"    value=\"sshkeys\" /&gt;\n&lt;/config&gt;\n</code></pre> Key Description networkAddress IP address used to open the agent's TCP listening port. A.B.C.D format (0.0.0.0 for all interfaces of the machine) port Port used as the agent's TCP listening port. Numerical format. checktimeout Maximum time allowed for a check command. Once this period has passed, the check order is considered completed. (In seconds) logdirectory Agent's trace file recording directory. tempdirectory Agent's working directory maxlogsizeinmo Maximum size before rotation of the trace file (In Megabytes) nbdaystodeletelogs Retention period for trace files archived under logdirectory /logs-backup/ (In days) loglevel Log levels ('NONE', 'ERROR', 'INFO', 'TRACE') executionthreshold Maximum number of parallel executions for (Start/Stop/Custom actions). This parameter does not apply to check actions. trustedservers List of IP addresses, or Dns names of XComponent AppControl servers authorized to contact the agent (Can be empty) ignoretrustedservers Disable trusted server option sshhost This parameter allows the agent to perform an SSH session with the account specified in the configuration of the application. The file containing the private key to use is located in the 'sshkeydirectory' directory and bears the name of the targeted user. This property works exclusively on Linux agent. sshkeydirectory Directory for storing Ssh private key files. The name of the expected files must be named with the name of the user targeted by the application configuration. The public key must be present in the ~/ssh/authorized_keys file of the remote account"},{"location":"agents/#environment-variables-configuration","title":"Environment variables configuration","text":"<p>Config.dat configuration supports environment variables as a value.</p> <p>Under Microsoft Windows:</p> <p>In config.dat you can use environment variables with the following pattern: %VARIABLE%.</p> <pre><code>&lt;config&gt;\n...\n  &lt;item key=\"tempdirectory\" value=\"%TEMP%\" /&gt;\n...\n&lt;/config&gt;\n</code></pre> <p>Under Linux/Unix:</p> <p>In config.dat you can use environment variables with the following pattern: $VARIABLE.</p> <pre><code>&lt;config&gt;\n...\n   &lt;item key=\"tempdirectory\" value=\u201d$TEMP\" /&gt;\n...\n&lt;/config&gt;\n</code></pre> <p>Note:</p> <pre><code>Each item key of the config.dat file can be overriden  by an environment variable named XC_MYITEMKEYINUPPERCASE. The priority is the following:\n1. If an XC_... variable exists the agent will use it\n2. The values in the config.dat are used only if the XC_... variables don't exist.\n\nExample:\nif an env variable named XC_TEMPDIRECTORY exists, this value will be used instead of the variable 'tempdirectory' defined in the config.dat.\n\n</code></pre>"},{"location":"agents/#checking-that-agents-port-is-opened","title":"Checking that agent's port is opened","text":"<p> In some situations, we need to check that the agent's port is correctly bind and accessible from another computer.</p> <ol> <li>Checking that the agent binds on its port (locally):</li> </ol> <pre><code>curl localhost:12567\n</code></pre> <p>If the agent is running, the expected message is:</p> <pre><code>curl: (52) Empty reply from server\n</code></pre> <p>If the agent is not running, the message is:</p> <pre><code>curl: (7) Failed to connect to localhost port 12567 after 2267 ms: Couldn't connect to server\n</code></pre> <ol> <li>Checking that the agent binds on its port (from a remote machine):</li> </ol> <pre><code>curl mymachine:12567\n</code></pre> <p>If the agent is running, the expected message is:</p> <pre><code>curl: (52) Empty reply from server\n</code></pre> <p>If the agent is not running or unreachable (for example behind a firewall), the message is:</p> <pre><code>curl: (7) Failed to connect to mymachine port 12567 after 2267 ms: Couldn't connect to server\n</code></pre> <p>Note:</p> <pre><code>You can use the AppControl Gateway to both check agent connectivity and also to execute commands on the agent host.\n</code></pre> <p>Please refer to the following link</p>"},{"location":"bestpractices/","title":"Agents/Gateways configuration best practices","text":"<p>According to your configuration, differents badges will be displayed in the UI. The badges are indicators which are used to secure your I.S (Information System).</p> <p>The badges are displayed in the Agents view.</p> <p></p>"},{"location":"bestpractices/#protocol-badges","title":"Protocol badges","text":"<ul> <li>The first badge encourages the use of a recent version of the Tls protocol:</li> </ul> Protocol Badge Tls13 Tls12 Tls - Ssl"},{"location":"bestpractices/#gateway-badges","title":"Gateway badges","text":"<ul> <li>The second badge encourages the use of a gateway to access agents. Indeed, the gateways are there to guarantee a stronger isolation at the network level and at the application level.</li> </ul> Number of gateways by agent Badge At least one None"},{"location":"bestpractices/#resilience-badges","title":"Resilience badges","text":"<ul> <li>The third badge encourages the use of several sites (at least primary and secondary). This declaration of the different sites is configured using the \"trustedservers\" variable in the agent's config.dat file. If \"ignoretrustedservers\" a \"gold medal\" will be displayed.</li> </ul> Number of servers declared in \"trustedserver\" Badge At least two One None"},{"location":"centreon/","title":"Centreon Import","text":"<p>The X4B platform includes a mechanism for importing your current Centreon (or Nagios) setup. This allows you to start off with a draft AppControl map file which includes all the hosts and services that you have defined in your Centreon configuration.</p>"},{"location":"centreon/#appcontrol-map","title":"AppControl map","text":"<p>The import will create one AppControl component for each host, and one for each service, with the host component being designated as a parent of the service component. The parent-child relationship denotes a dependency relation, where the child depends on a properly working parent to perform its own function.</p> <p>You can designate one of your servers as a bastion host. If you do, it is assumed that you will deploy an AppControl agent on it, and then that server will be used to run remote checks on other hosts, using the ping or ssh commands, for example.</p> <p>By default, the host components have a check command that does ping -c 1 &lt;hostname&gt;. The service components are created with sample check, start, and stop commands that simulate the actual checks using a temporary file. All these default commands assume the agent is running on a linux machine, but you can also configure your map to deploy the agents on Windows servers (see xxx for more details on AppControl agents).</p>"},{"location":"centreon/#importing-your-setup","title":"Importing your setup","text":"<p>The import tool is a Windows binary that you can download from here. To import your setup, first log on to your Centreon server, and export your configuration to a text file, with the following command:</p> <pre><code>centreon -u &lt;admin_user&gt; -p &lt;admin_password&gt; -e &gt; centreon_export.txt\n</code></pre> <p>Second, run the import tool, specifying your export file as the input file:</p> <pre><code>ac_from_centreon.exe -f centreon_export.txt -n CentreonExported -v 1.0\n</code></pre> <p>This creates a file called CentreonExported,1.0.xml in the current directory (you are free to pick any name and version you want, see the available options below). You can open this file in the editor of your choice to inspect or edit it, and you can upload it to AppControl with the New button on the AppControl UI. Other options are available:</p> <pre><code>Usage: ac_from_centreon.exe OPTIONS\nOptions:\n    -f &lt;filepath&gt;\n    -r | --root-host &lt;hostname&gt;\n    -b | --bastion-host &lt;hostname&gt;\n    -n &lt;map name&gt; (required)\n    -v &lt;version&gt; (required)\n    -o &lt;map_filepath&gt;\n</code></pre> <p>The --root-host option lets you specify one server as being the root, in the AppControl architecture map, of the servers graph. This indicates that all the other server depend on this one; you would typically choose a server playing some essential role, such as a DNS server.</p> <p>The --bastion-host option lets specify one server as being the bastion, as described above.</p> <p>The -n and -v options are required, as they define the map name and version. If no path is given for the map file, the file gets created in the current directory with the name &lt;map_name&gt;,&lt;version&gt;.xml; alternatively, you may specify a different path and name using the -o option. </p>"},{"location":"cli/","title":"AppControl Cli","text":""},{"location":"cli/#latest-available-versions","title":"Latest Available versions","text":"Operating System Format Latest version Microsoft Windows / Linux zip AppControl Cli Zip N/A docker docker pull xcomponent/appcontrol-cli:latest"},{"location":"cli/#objectives","title":"Objectives","text":"<p>AppControl Cli is intended to start/stop/load/suspend Appcontrol's applications from the command line. This tool is mainly used to integrate AppControl in a scheduler/workload automation software. </p>"},{"location":"cli/#installation","title":"Installation","text":"<p>...</p>"},{"location":"cli/#configuration","title":"Configuration","text":"<p>...</p>"},{"location":"cmdb/","title":"AppControl CMDB Integration","text":"<p>AppControl can be integrated with a Configuration Management Database (cmdb).</p> <p>AppControl currently supports ServiceNow as a cmdb provider, but other providers such as iTop or EasyVista can also be considered. </p>"},{"location":"cmdb/#use-cases","title":"Use Cases","text":"<p>There can be several use cases for integrating AppControl and a cmdb:</p> <ul> <li>conformity check between operational reality and cmdb referential</li> <li>map (eg: AppControl Application) provisioning based on cmdb data </li> </ul>"},{"location":"cmdb/#conformity-check","title":"Conformity check","text":"<p>In the first use case, whenever a map is loaded, AppControl checks whether the objects declared in the map are present in the cmdb, and produces a report listing the elements that were found missing.</p> <p>Currently, nothing is ever added to the cmdb; a future version may offer the possibility for the user to choose whether to populate the cmdb with elements from the map.</p>"},{"location":"cmdb/#map-provisioning","title":"Map provisioning","text":"<p>In the second use case, the cmdb acts as the configuration repository for AppControl artefacts, such as the Component. For example, the cmdb may hold a standard set of actions that are expected to be present in certain components: when the actions are found to be missing in the map, they can be copied from the cmdb, ensuring that the Components in the operational reality match the cmdb view of the world.</p> <p>Eventually, it might be possible to generate entire maps from the cmdb, thereby ensuring automatic conformity. </p>"},{"location":"cmdb/#cmdb-integration-howto","title":"Cmdb Integration HOWTO","text":""},{"location":"cmdb/#cmdb-access-and-credentials","title":"Cmdb access and credentials","text":"<p>The first step is to define one or more cmdb objects in AppControl. In the Referential section at the bottom of the left-hand side panel, press the CMDB button to display the page where you can manage access to various CMDBs:</p> <p></p> <p>To register a new ServiceNow CMDB, press the register button and fill in the fields:</p> <ul> <li><code>Name</code> is the local AppControl identifier for this cmdb</li> <li><code>User</code>/<code>Password</code> are your credentials on the ServiceNow server</li> <li><code>ServiceNow Url</code> identifies the ServiceNow server you wish to use</li> </ul> <p>Once a cmdb has been defined, you can reference it in the map import wizard, to request a validation of the map being imported.</p>"},{"location":"cmdb/#map-import-wizard","title":"Map Import Wizard","text":"<p>When importing a new map file, the fifth step is the CMDB validation, where you are presented with the list of available cmdbs. </p> <p></p> <p>Make sure the cmdb server you want to use is up and running at this point. Click on its name and press Next. A progress bar indicates that validation is taking place (this can take a few moments). If every element in the map is matched to a corresponding element in the cmdb, a message will indicate that the validation has succeeded:</p> <p></p> <p>If the verification process detected configuration information in the cmdb that was not in the map (such as Component actions) this will also be indicated:</p> <p></p> <p>If any discrepancies were found when comparing the map to the cmdb, a report is shown listing the elements that were found to be missing:</p> <p></p>"},{"location":"cmdb/#understanding-the-servicenow-integration","title":"Understanding the ServiceNow integration","text":"<p>The following sections detail the mapping choices that were made to represent AppControl data in ServiceNow. Keep in mind that ServiceNow is very much configurable, and even lets you define custom data tables, so any integration might require specific work. </p>"},{"location":"cmdb/#mapping-between-appcontrol-and-servicenow","title":"Mapping between AppControl and ServiceNow","text":"<p>The following table shows the correspondance between AppControl concepts or objects, and ServiceNow resources.</p> AppControl ServiceNow Object ServiceNow Table Application Application cmdb_ci_appl Host Computer cmdb_ci_computer Component Service cmdb_ci_service Component hostref Computer-Service Relation cmdb_ci_rel Action Commands cmdb_running_process"},{"location":"cmdb/#representing-components-actions-in-servicenow","title":"Representing Components actions in ServiceNow","text":"<p>Each Component in AppControl has a mandatory <code>hostref</code> attribute linking to the server where the component is hosted. This link is represented by a ServiceNow <code>Depends on::Used by</code> relation.</p> <p>The actions defined on a Component are stored in the RunningProcess table (cmdb_running_process), with a link to the corresponding host. Here's the detailed mapping on the fields of the RunningProcess table:</p> AppControl Element Field name action name :: component name command action value parameters application name computer hostref"},{"location":"cmdb/#example","title":"Example","text":"<p>AppControl XML map file:</p> <pre><code>&lt;app name=\"inv_test_missing_from_map\" version=\"1.0\"&gt;\n  &lt;component name=\"inv_pricing_001\" description=\"An Invivoo component\" group=\"A group\"\n           hostref=\"inv_host_001\" authref=\"LOCAL\"redirectoutput=\"false\" type=\"file\"&gt;\n    &lt;action value=\"sandbox.sh check inv_pricing_001\" name=\"check\" /&gt;\n    &lt;action value=\"sandbox.sh enable inv_pricing_001\" name=\"enable\" /&gt;\n    &lt;action value=\"sandbox.sh disable inv_pricing_001\" name=\"disable\" /&gt;\n  &lt;/component&gt;\n</code></pre> <p>ServiceNow cmdb_running_process table record (extracts):</p> <pre><code>{\n    \"command\": \"sandbox.sh check inv_pricing_001\",\n    \"computer\": {\n        \"link\": \"https://dev78474.service-now.com/api/now/v1/table/cmdb_ci_computer/8ba1aa202f7320102cd8d49df699b687\",\n        \"value\": \"8ba1aa202f7320102cd8d49df699b687\"\n    },\n    \"name\": \"check::inv_pricing_001\",\n    \"parameters\": \"inv_test_missing_from_map\",\n}\n</code></pre>"},{"location":"cmdb/#populating-your-cmdb","title":"Populating your Cmdb","text":"<p>The cmdb can be populated by inserting individual objects using the cmdb provider's interface. But as the volume of data grows, populating your cmd can become a daunting task. Invivoo is developing tools to automate the creation of cmdb objects from AppControl maps [TO BE CONTINUED].</p>"},{"location":"coreconcepts/","title":"Core Concepts of AppControl","text":"<p>AppControl is built on a set of core concepts that enable effective monitoring, control, and automation of your applications across both local and cloud-based environments. Understanding these concepts will help you make full use of the platform.</p>"},{"location":"coreconcepts/#1-agents","title":"1. Agents","text":"<p>AppControl uses agents to interact with your local infrastructure. These agents act as the bridge between your on-premises applications and the AppControl SaaS platform. Agents can be installed on both Windows and Linux systems, allowing for flexible integration with diverse IT environments.</p>"},{"location":"coreconcepts/#2-gateway","title":"2. Gateway","text":"<p>The gateway is the critical link between agents deployed on your local infrastructure and the AppControl SaaS platform. It facilitates secure and reliable communication, ensuring that actions taken on your applications are synchronized with the cloud.</p>"},{"location":"coreconcepts/#3-applications","title":"3. Applications","text":"<p>In AppControl, an application represents a collection of components that need to be monitored and managed. Each application is defined through a YAML configuration file, which describes its components and the actions that can be performed on them.</p>"},{"location":"coreconcepts/#4-components","title":"4. Components","text":"<p>A component is a critical part of an application and defines the actions that AppControl can perform. Each component is described by three primary actions: start, stop, and check. In addition, some components may have optional custom commands.</p>"},{"location":"coreconcepts/#command-types","title":"Command Types:","text":"<ul> <li>Check Command: Retrieves the current state of the component.</li> <li>Start Command: Starts the component, initiating processes or services.</li> <li>Stop Command: Stops the component, halting processes or services.</li> <li>Custom Commands: Optional commands that can be defined based on specific application requirements.</li> </ul>"},{"location":"coreconcepts/#dependency-behavior","title":"Dependency Behavior:","text":"<ul> <li>Parent-Child Dependencies: Components follow a parent-child hierarchy. A component can only start if its parent components are already started. Similarly, a component can only stop if its child components are already stopped.</li> <li>Startup Sequence: When starting an application, AppControl first starts the parent components and then proceeds to start their child components.</li> <li>Shutdown Sequence: When stopping an application, AppControl stops child components first before stopping their parent components.</li> </ul>"},{"location":"coreconcepts/#5-diagnostics-actions-on-demand-actions","title":"5. Diagnostics Actions (On-Demand Actions)","text":"<p>AppControl provides on-demand actions, also referred to as diagnostics actions, which allow you to perform manual checks or gather diagnostic information at any time.</p> <ul> <li>Purpose: Diagnostics actions help troubleshoot issues, gather performance metrics, or run custom scripts on-demand without waiting for an incident to trigger automated actions.</li> <li>Customizable: You can define these actions in the YAML file and provide flexible input parameters that can be edited by users as needed.</li> <li>Example: A diagnostics action might involve checking log files, gathering system metrics, or testing connectivity between components.</li> </ul>"},{"location":"coreconcepts/#6-diagnostics-and-issue-resolution","title":"6. Diagnostics and Issue Resolution","text":"<p>AppControl includes built-in diagnostics to detect and resolve common issues related to component states, particularly focusing on dependency relationships between components.</p>"},{"location":"coreconcepts/#diagnostic-situation","title":"Diagnostic Situation:","text":"<ul> <li>Orphan Components: AppControl identifies issues when components are in an incorrect state relative to their parent or child components. For example:<ul> <li>Issue 1: A component is stopped while its parent is running.</li> <li>Issue 2: A component is running while its child components are stopped.     In these cases, AppControl flags the issue and provides diagnostic information.</li> </ul> </li> </ul>"},{"location":"coreconcepts/#resolution-process","title":"Resolution Process:","text":"<ul> <li>Stop Orphaned Components: When an orphaned component is detected (i.e., a component that is running without its necessary parent components), AppControl will stop the orphaned components to maintain consistency.     </li> <li>Healthy State: Once the issues are resolved, the system reaches a healthy state, ensuring all components are properly aligned with their parent-child dependencies.     </li> <li>Restart by Branch: AppControl can restart components by \"branch,\" ensuring that all parent and child components are properly started in sequence, maintaining the application's integrity.     </li> </ul>"},{"location":"coreconcepts/#7-automated-recovery-actions","title":"7. Automated Recovery Actions","text":"<p>In AppControl, automated recovery actions are designed with caution to prevent escalating issues. By default, AppControl does not automatically restart components to avoid the risk of increasing a problem. Instead, AppControl offers a flexible approach where users can define scheduled auto-restart actions using built-in cron expressions.</p>"},{"location":"coreconcepts/#8-application-monitoring-focus","title":"8. Application Monitoring Focus","text":"<p>AppControl is different from traditional monitoring solutions because it is application-centric. While other tools often focus on infrastructure (e.g., servers and networks), AppControl monitors and manages the actual applications, which are the heart of your business.</p>"},{"location":"coreconcepts/#summary","title":"Summary","text":"<p>Understanding these core concepts will enable you to effectively use AppControl to monitor, manage, and automate your applications. Whether you are working with legacy on-premises systems or cloud-native applications, AppControl\u2019s agents, gateway, and application-centric approach offer the flexibility and control you need to maintain uptime and operational efficiency.</p>"},{"location":"dynamicMapInformations/","title":"Dynamic informations","text":"<p>An application is a set of components defined statically using a YAML/XML format (see: Create an application). However, the application can be enriched with dynamic information. Dynamic information is returned by the <code>check</code> command.</p> <p>To return dynamic information, the <code>check</code> command should log some data to the standard output, which must follow this format:</p> <pre><code>&lt;appcontrol&gt; APPCONTROL JSON OBJECT &lt;/appcontrol&gt;\n</code></pre> <pre><code>{\n    \"link\": \"Hyperlink to wathever you want\", //Optional\n    \"name\": \"Name of the component\",          //Required\n    \"displayName\": \"Display name\",            //Optional\n    \"state\": \"  Initializing |\n                InError |\n                Start |\n                Starting |\n                Started |\n                Stop |\n                Stopping |\n                Stopped \",     //Optional\n    \"parents\":                 //Optional but highly recommanded\n    [\n        \"Parent1\",\n        \"Parent2\",\n    ],\n    \"exitCode\": 256, //Optional\n    \"color\": \"Color of the code RGB format or hexa code ('255,255,255' or #FFFFFF\", //Optional\n    \"Type\": \" Used to display an icon on the map. An url to an image (png, jpeg or svg) can be set. Anyway you can use one of the following value: browser, cd, chip, data-information, devises, dollar, euro, file, green-thermometer, hdd, memflash, memory, middleware, network, orange-thermometer, pounds, process, service, tools, user, yen\",  //Optional\n    \"groupName\": \"Name of the group\",  //Optional\n    \"customActions\": //Optional\n        [\n            {\n            \"visibility\": \"Private\",\n            \"customActionName\": \"echo Action\",\n            \"customActionDescription\":  null,\n            \"customActionCommandLine\": \"echo $(message)\",\n            \"parallelCustomAction\": false,\n            \"parameters\":\n            [\n                {\n                    \"parameterName\":\"message\",\n                    \"description\": \"\",\n                    \"defaultValue\": \"Welcome message\",\n                    \"validationRule\": \"*\",\n                    \"isEditable\": true\n                }\n            ]\n            }\n        ],\n    \"filters\": {\"filter name 1\": [\"filter values\"] ,\n                \"filter name 2\": [\"filter values\"]\n                }  //Optional,\n    \"dynamicTree\" : [\n            {\n                //A json object with the properties defined above\n            }\n    ] //Optional,\n}\n</code></pre> <p>A full example is available in this documentation:</p> <ul> <li>Application sample</li> <li>JSON dynamic data</li> </ul> <p>In this example, dynamic components are displayed with an octagonal shape, while static components are displayed with a square shape.</p> <p></p>"},{"location":"gettingStarted/","title":"Getting Started with AppControl","text":"<p>AppControl is designed as a simple, cloud-based Software as a Service (SaaS) solution, allowing you to monitor and manage your applications from anywhere, without the need for complex on-premises infrastructure. This quick-start guide will help you set up and begin using AppControl in minutes.</p> <p>For businesses with specific requirements\u2014whether it\u2019s tailored SLAs, on-premises deployment, or other custom needs\u2014please Contact us to discuss how we can meet your specific goals.</p>"},{"location":"gettingStarted/#try-demo","title":"Try AppControl with a Demo (No Local Setup Required)","text":"<p>To help you get started quickly, AppControl offers a demo environment that allows you to explore the core features of the platform without the need for any local setup or infrastructure. This is the perfect way to understand how AppControl can reduce downtime and streamline incident response.</p> <ul> <li>Log in:  - Go to the XComponent AppControl website  - Log in using a social provider  - You're done! You can now get started with AppControl!</li> <li>Import a demo application: </li> </ul> <p>Click on the Overview/New Application button, select XML/YAML file from url and paste the following link of an \"Hello World\" application.</p>      Copy Application Link    <p></p> <p>Follow the wizard (clicking on 'Next' button). In the 'Agent/Gateway configuration' section select 'SaaS Gateway'. Then scroll down on the bottom of the page and click on \"Create my application\".</p> <ul> <li>Explore the UI: Explore monitoring, incident management, and actions.</li> </ul> <p>The demo version provides a hands-on look at AppControl\u2019s capabilities.</p>"},{"location":"gettingStarted/#some-explanations-about-the-demo-yaml-file","title":"Some explanations about the Demo YAML file","text":""},{"location":"gettingStarted/#yaml-configuration-for-helloworld-application","title":"YAML Configuration for \"helloworld\" Application","text":"<p>The YAML configuration file for the \"helloworld\" application defines how the application is monitored, controlled, and secured through AppControl. This guide explains the structure and objectives of the YAML file, allowing you to customize your own configurations.</p>"},{"location":"gettingStarted/#objectives-of-the-yaml-configuration","title":"Objectives of the YAML Configuration","text":"<p>The primary purpose of the YAML configuration file is to outline the application\u2019s structure, define its components, and specify the actions AppControl will perform. It also describes how agents and authentication methods are used to securely communicate with and control the application.</p>"},{"location":"gettingStarted/#key-objectives","title":"Key Objectives","text":"<ol> <li> <p>Define the Application Name, Version, and Components</p> <ul> <li>The YAML file begins by specifying the application\u2019s <code>Name</code> and <code>Version</code>, followed by its components. In this case, the component \"hello\" represents the main part of the \"helloworld\" application.</li> </ul> </li> <li> <p>Establish Agent-Based Monitoring and Control</p> <ul> <li>An agent, called <code>LOCAL</code>, is defined to manage the application. This agent communicates over port <code>12567</code> using the TLS 1.2 protocol for secure connections. The agent monitors the application\u2019s state and can execute actions such as starting or stopping the application.</li> </ul> </li> <li> <p>Define Secure Authentication Mechanism</p> <ul> <li>The file includes an authentication method, <code>LOCAL</code>, to secure the communication between the agent and the application components. This ensures that only authorized agents can execute actions on the application.</li> </ul> </li> <li> <p>Configure Component Actions</p> <ul> <li>The YAML file defines a series of actions that AppControl can perform on the \"hello\" component:<ul> <li>Check Action: Checks the existence and content of the <code>hello.txt</code> file.</li> <li>Start Action: Starts the application by creating the <code>hello.txt</code> file.</li> <li>Stop Action: Stops the application by removing the <code>hello.txt</code> file.</li> <li>Custom Action: Allows users to input a custom message and execute the \"Say Hello\" command.</li> </ul> </li> </ul> </li> <li> <p>Group Components for Easier Management</p> <ul> <li>The <code>Group</code> field organizes components into logical groups for easier management. In this case, the \"hello\" component is grouped under \"Hello group\".</li> </ul> </li> <li> <p>Provide a Template for Automation and Customization</p> <ul> <li>The YAML file serves as a template for automating routine tasks, such as starting and stopping the application, while also allowing customization through user-defined actions.</li> </ul> </li> <li> <p>Ensure Scalability and Extensibility</p> <ul> <li>The structure of the YAML file allows you to scale and extend the configuration by adding more agents, components, or actions as needed for more complex applications.</li> </ul> </li> </ol>"},{"location":"gettingStarted/#example-yaml-configuration","title":"Example YAML Configuration","text":"<p>Here\u2019s an example of the YAML configuration for the \"helloworld\" application:</p> <pre><code>Name: helloworld\nVersion: v1\nIcon: {}\nAgents:\n    - Name: LOCAL\n      Port: 12567\n      SslProtocol: tls12\nAuthentications:\n    - Name: LOCAL\nComponents:\n    - Name: hello\n      Agent:\n          AgentName: LOCAL\n          AuthentificationName: LOCAL\n      Icon:\n          SystemName: file\n      Group: Hello group\n      Description: Hello World\n      Actions:\n          - Name: check hello\n            Type: check\n            Value: cat hello.txt\n          - Name: start hello\n            Type: start\n            Value: echo hello &gt; hello.txt\n          - Name: stop hello\n            Type: stop\n            Value: rm hello.txt\n          - Name: Say Hello\n            Type: custom\n            Value: echo $(message)\n            InputParameters:\n                - Name: message\n                  Value: Hello\n                  CanEdit: true\n                  Validation: '*'\n</code></pre>"},{"location":"gettingStarted/#connecting-to-local-infrastructure","title":"Connecting to Local Infrastructure","text":"<p>If you wish to manage applications running in your on-premises environment, AppControl can be connected to your local infrastructure through agents and gateways. While this is an advanced setup, it allows for seamless integration with both legacy and cloud applications.</p> <p>For detailed instructions on how to connect to your local infrastructure, including agent installation and gateway setup, please refer to the following pages:</p> <ul> <li>Setting up Agents</li> <li>Configuring the Gateway</li> <li>Full Local Infrastructure Guide</li> </ul>"},{"location":"map/","title":"AppControl Application","text":"<p>In AppControl, applications (also referred to as \"maps\") were traditionally defined using an XML file. However, the preferred and modern format is now YAML, which offers greater flexibility and readability, making it easier to manage complex configurations.</p> <p>Applications in AppControl are structured as a hierarchy of components, with each component representing a critical part of the system. These components can be defined manually by editing YAML files, giving you full control over every aspect of the application setup. For users who prefer a more guided approach, AppControl also provides built-in wizards within the UI. These wizards simplify the process by generating application definitions based on your local infrastructure or from Azure environments, allowing you to create these files quickly and efficiently.</p> <p>Whether you choose to manually create your application configurations or leverage the built-in wizards, AppControl offers the flexibility to adapt to your preferred workflow, ensuring seamless integration with your existing systems.</p>"},{"location":"map/#yaml-format","title":"YAML Format","text":"<p>This document describes the configuration schema for AppControl applications, which is defined in YAML format. The YAML configuration file specifies the structure of an application, including its components, agents, authentication methods, scheduling, and actions.</p> <p>If you're unfamiliar with YAML, you can learn more about it here: YAML Documentation.</p> <p>In the YAML format, AppControl configurations are more readable and user-friendly. YAML offers greater support for advanced features and is the recommended format for defining applications in AppControl.</p> <p>The YAML file typically includes the following key information:</p> <ul> <li>Component Definitions: Each component is described by a set of commands:<ul> <li>Check Command: Mandatory for verifying the component's status.</li> <li>Start Command: Optional, used to start the component.</li> <li>Stop Command: Optional, used to stop the component.</li> <li>Custom Commands: Optional, for executing specific tasks or actions tailored to the component.</li> </ul> </li> <li>Agent List: Specifies the agents responsible for executing the commands for each component.</li> <li>Identity Information: Defines which users are authorized to run the commands for specific components.</li> <li>Scheduling Information: Allows scheduling of start/stop commands for automatic execution at predefined times.</li> </ul> <p>Full YAML Format described below:</p>"},{"location":"map/#1-name","title":"1. Name","text":"<ul> <li>Type: <code>string</code></li> <li>Description: The name of the service.</li> </ul>"},{"location":"map/#2-version","title":"2. Version","text":"<ul> <li>Type: <code>string</code></li> <li>Description: The version of the service.</li> </ul>"},{"location":"map/#3-description","title":"3. Description","text":"<ul> <li>Type: <code>string</code></li> <li>Description: A brief description of the service.</li> </ul>"},{"location":"map/#4-nbretry","title":"4. NbRetry","text":"<ul> <li>Type: <code>integer</code></li> <li>Description: The number of restart attempts for the service.</li> </ul>"},{"location":"map/#5-variables","title":"5. Variables","text":"<ul> <li>Type: <code>array</code></li> <li>Description: A list of variables used by the service.</li> <li>Properties:<ul> <li>Name: The name of the variable (<code>string</code>).</li> <li>Value: The value of the variable (<code>string</code>).</li> </ul> </li> </ul>"},{"location":"map/#6-agents","title":"6. Agents","text":"<ul> <li>Type: <code>array</code></li> <li>Description: A list of agents responsible for executing commands.</li> <li>Properties:<ul> <li>Name: The name of the agent (<code>string</code>).</li> <li>Address: The address of the agent (<code>string</code>).</li> <li>Port: The port used by the agent (<code>integer</code>).</li> <li>Gateway: The gateway used by the agent (<code>string</code>).</li> <li>DependsOnComponent: Specifies that the agent is triggered when the component is started (<code>string</code>).</li> <li>SslProtocol: The SSL protocol used by the agent (<code>tls</code>, <code>tls12</code>, or <code>tls13</code>).</li> </ul> </li> </ul>"},{"location":"map/#7-authentications","title":"7. Authentications","text":"<ul> <li>Type: <code>array</code></li> <li>Description: A list of authentication methods used for securing agent communications.</li> <li>Properties:<ul> <li>Name: The name of the authentication method (<code>string</code>).</li> </ul> </li> </ul>"},{"location":"map/#8-schedulingstart","title":"8. SchedulingStart","text":"<ul> <li>Type: <code>array</code></li> <li>Description: Scheduling of start tasks using cron expressions.</li> <li>Properties:<ul> <li>Name: The name of the start task (<code>string</code>).</li> <li>Expression: The cron expression that defines the schedule (<code>string</code>).</li> </ul> </li> </ul>"},{"location":"map/#9-schedulingstop","title":"9. SchedulingStop","text":"<ul> <li>Type: <code>array</code></li> <li>Description: Scheduling of stop tasks using cron expressions.</li> <li>Properties:<ul> <li>Name: The name of the stop task (<code>string</code>).</li> <li>Expression: The cron expression that defines the schedule (<code>string</code>).</li> </ul> </li> </ul>"},{"location":"map/#10-components","title":"10. Components","text":"<ul> <li>Type: <code>array</code></li> <li>Description: The components of the service, each defined by a set of properties and actions.</li> <li>Properties:<ul> <li>Name: The name of the component (<code>string</code>).</li> <li>DisplayName: The display name of the component (<code>string</code>).</li> <li>Agent: Defines the agent associated with the component, including:<ul> <li>AgentName: The name of the agent (<code>string</code>).</li> <li>AuthentificationName: The name of the authentication method used (<code>string</code>).</li> </ul> </li> <li>CheckFrequency: The frequency (in seconds) for checking the status of the component (<code>integer</code>).</li> <li>Icon: Icon properties, including:<ul> <li>SystemName: The system name of the icon (e.g., <code>browser</code>, <code>sqlserver</code>, etc.) (<code>string</code>).</li> <li>Url: The URL for the icon (<code>string</code>).</li> </ul> </li> <li>Group: The component's group (<code>string</code>).</li> <li>Description: A description of the component (<code>string</code>).</li> <li>Actions: A list of actions available for the component:<ul> <li>Name: The name of the action (<code>string</code>).</li> <li>Type: The type of the action (<code>string</code>).</li> <li>Value: The command to execute the action (<code>string</code>).</li> <li>RetryTime: The time to retry the action (<code>integer</code>).</li> <li>Visibility: Visibility of the action (<code>Private</code>, <code>Public</code>).</li> <li>WaitAfter: Time to wait after the action (<code>integer</code>).</li> <li>Description: A description of the action (<code>string</code>).</li> <li>InputParameters: Input parameters for the action:<ul> <li>Name: The name of the parameter (<code>string</code>).</li> <li>Value: The value of the parameter (<code>string</code>).</li> <li>Description: A description of the parameter (<code>string</code>).</li> <li>CanEdit: Specifies if the parameter can be edited (<code>boolean</code>).</li> <li>Validation: Validation rules for the parameter (<code>string</code>).</li> </ul> </li> <li>OutputParameters: Output parameters for the action:<ul> <li>Name: The name of the parameter (<code>string</code>).</li> <li>Value: The value of the parameter (<code>string</code>).</li> <li>Description: A description of the parameter (<code>string</code>).</li> </ul> </li> <li>HypertextResources: Additional hypertext resources related to the action.</li> </ul> </li> </ul> </li> </ul>"},{"location":"map/#11-triggers","title":"11. Triggers","text":"<ul> <li>Type: <code>array</code></li> <li>Description: Cron-based triggers for the components.</li> <li>Properties:<ul> <li>Name: The name of the trigger (<code>string</code>).</li> <li>Expression: The cron expression (<code>string</code>).</li> <li>TimeZoneId: The time zone ID for the trigger (<code>string</code>).</li> </ul> </li> </ul>"},{"location":"map/#12-filters","title":"12. Filters","text":"<ul> <li>Type: <code>array</code></li> <li>Description: Filters that define specific conditions for components.</li> <li>Properties:<ul> <li>Name: The name of the filter (<code>string</code>).</li> <li>Value: The value for the filter (<code>string</code>).</li> </ul> </li> </ul>"},{"location":"map/#13-interactwithdesktop","title":"13. InteractWithDesktop","text":"<ul> <li>Type: <code>boolean</code></li> <li>Description: (Windows only) Specifies if the agent running as a service can interact with the desktop.</li> </ul>"},{"location":"map/#required-fields","title":"Required Fields","text":"<p>The following fields are required in the AppControl YAML configuration file:</p> <ul> <li>Name</li> <li>Version</li> <li>Description</li> <li>NbRetry</li> <li>Agents</li> <li>Authentications</li> <li>Components</li> </ul> <p>Below is an example of a minimalist AppControl Hello World artefact in YAML:</p> <pre><code>Name: helloworld\nVersion: v1\nIcon: {}\nAgents:\n    - Name: LOCAL\n      Port: 12567\n      SslProtocol: tls12\nAuthentications:\n    - Name: LOCAL\nComponents:\n    - Name: hello\n      Agent:\n          AgentName: LOCAL\n          AuthentificationName: LOCAL\n      Icon:\n          SystemName: file\n      Group: Hello group\n      Description: Hello World\n      Actions:\n          - Name: check hello\n            Type: check\n            Value: cat hello.txt\n          - Name: start hello\n            Type: start\n            Value: echo hello &gt; hello.txt\n          - Name: stop hello\n            Type: stop\n            Value: rm hello.txt\n          - Name: Say Hello\n            Type: custom\n            Value: echo $(message)\n            InputParameters:\n                - Name: message\n                  Value: Hello\n                  CanEdit: true\n                  Validation: '*'\n</code></pre>"},{"location":"map/#xml-format","title":"XML Format","text":"<p>While the XML format is still supported, it is generally less flexible and more complex than YAML. The XML format is often used for legacy configurations.</p> <p>The XML file typically includes the following key information:</p> <ul> <li> <p>Component Definitions: Each component is described by a set of commands:</p> <ul> <li>Check Command: Mandatory for verifying the component's status.</li> <li>Start Command: Optional, used to start the component.</li> <li>Stop Command: Optional, used to stop the component.</li> <li>Custom Commands: Optional, for executing specific tasks or actions tailored to the component.</li> </ul> </li> <li> <p>Agent List: Specifies the agents responsible for executing the commands for each component.</p> </li> <li> <p>Identity Information: Defines which users are authorized to run the commands for specific components.</p> </li> <li> <p>Scheduling Information: Allows scheduling of start/stop commands for automatic execution at predefined times.</p> </li> </ul> <p>Below is an example of a minimalist AppControl Hello World artefact in XML:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n    &lt;hosts&gt;\n       &lt;!-- The way to join the agent --&gt;\n        &lt;host hostid=\"LOCAL\" host=\"127.0.0.1\" port=\"12567\" sslprotocol=\"tls12\" /&gt;\n    &lt;/hosts&gt;\n    &lt;auths&gt;\n        &lt;!-- Identity of the user executing the commands. If empty, commands inherit from agent credentials --&gt;\n        &lt;auth authid=\"LOCAL\" domain=\"\" password=\"\" user=\"\" /&gt;\n    &lt;/auths&gt;\n    &lt;app name=\"helloworld\" version=\"v1\" retry=\"1\"&gt;\n       &lt;!-- A simple component executing an 'echo command' every minute --&gt;\n        &lt;component name=\"hello\" hostref=\"LOCAL\" authref=\"LOCAL\" redirectoutput=\"true\" checkFrequency=\"60\" type=\"file\"&gt;\n            &lt;action value=\"cat hello.txt\" name=\"check\" /&gt;\n            &lt;action value=\"echo hello &gt; hello.txt\" name=\"enable\" /&gt;\n            &lt;action value=\"rm hello.txt\" name=\"disable\" /&gt;\n            &lt;action value=\"echo $(message)\" commandname=\"echo Action\" name=\"custom\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"message\" value=\"Hello\" canedit=\"true\" validation=\"*\" /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n    &lt;/app&gt;\n&lt;/apps&gt;\n\n</code></pre>"},{"location":"map/#xml-tag-descriptions","title":"XML Tag Descriptions","text":""},{"location":"map/#the-apps-tag","title":"The <code>&lt;apps&gt;</code> Tag","text":"<p>The <code>&lt;apps&gt;</code> tag is the root element that contains all the elements of the configuration.</p> <pre><code>&lt;apps&gt;\n    &lt;hosts&gt;...&lt;/hosts&gt;\n    &lt;auths&gt;...&lt;/auths&gt;\n    &lt;app&gt;...&lt;/app&gt;\n    &lt;crontable&gt;...&lt;/crontable&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"map/#the-hosts-tag","title":"The <code>&lt;hosts&gt;</code> Tag","text":"<p>The <code>hosts</code> tag groups together a set of <code>host</code> tags that describe the agents used to communicate with the components.</p> Attribute Description host Required Value: string. Name to resolve or IPv4 address of the machine to be contacted on the network port Required Value: integer. Tcp port number to use join the agent. hostid Required Value: string. Mnemonic name to designate the host agent and which will then be used as the value of the hostref attribute in a component tag. sslprotocol Optional Default value is set to tls12. Possible values: ssl, tls, tls12. Note: on most Operating Systems ssl and tls are obsolete"},{"location":"map/#the-auths-tag","title":"The <code>&lt;auths&gt;</code> Tag","text":"<p>The <code>auths</code> tag groups together a set of <code>auth</code> tags that describe the identities used to perform actions on application components. These identities will be utilized by agents.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;auths&gt;\n     &lt;auth authid=\"LOCAL\" domain=\"\" password=\"\" user=\"\" /&gt;\n   &lt;/auths&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> Attribute Description authid Required A mnemonic name used to identify the identity that will be referenced by the <code>authref</code> attribute in a component tag. user Required Can be empty. The username or identity. If this value is empty, the username will default to the one running the agent. password Required Can be empty. Value: string. The user's clear text password for authentication. If both the username and password are empty, the identity will default to the one running the agent. domain Optional Microsoft Windows only. The Windows domain name for authentication. <pre><code>                                                                                              |\n</code></pre>"},{"location":"map/#the-app-tag","title":"The <code>&lt;app&gt;</code> Tag","text":"<p>The <code>app</code> tag defines the application and its version It can also contain a reference to a cron schedule for automatic actions.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n       &lt;!-- ... --&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> Attribute Description name Required Mnemonic name to designate an application version Required . Mnemonic name of the application version. Perhaps in a numbered form \"1.3.6\", named \"current\" or mixed \"1.3.6-Stable\" cronref Optional Reference to a \"crontable\" retry Optional Value: integer. The value of the default number of retries to perform component actions on the application"},{"location":"map/#the-component-tag","title":"The <code>&lt;component&gt;</code> Tag","text":"<p>The <code>component</code> tag defines the individual components of the application and their actions (check, start, stop, custom).</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;action name=\"check\" value=\"dir componentFile.txt\" /&gt;\n            &lt;action name=\"enable\" value=\"echo start &gt; componentFile.txt\" /&gt;\n            &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> Attribute Description name Required Name of the component (should be unique in the application). group Optional Name of the group. Used to group a set of components in the UI. hostref Mandatory Value: string. Reference to the agent (see <code>&lt;hosts&gt;</code> tag). Required if not set on the action. authref Mandatory Value: string. Reference to the agent identity (see <code>&lt;auths&gt;</code> tag). Required if not set on the action. type Optional Used to display an icon on the map. A URL to an image (png, jpeg, or svg) can be set. You can also use one of the following values: browser, cd, chip, data-information, devices, dollar, euro, file, green-thermometer, hdd, memflash, memory, middleware, network, orange-thermometer, pounds, process, service, tools, user, yen. description Optional Value: string. Label of the component in addition to the name. redirectoutput Optional Value: boolean. If set to true, standard output will be parsed to find dynamic messages or dynamic components. checkFrequency Optional Value: integer. Component check cycle frequency (in seconds). The default value is set at the server configuration level. retryNumber Optional Value: integer. Maximum number of retry attempts. displayname Optional Value: string. Display name of an application component, replacing \"name\" in the UI."},{"location":"map/#the-father-tag","title":"The father TAG","text":"<p>The <code>father</code> tag creates a dependency on a component. AppControl's approach is based on the principle that child components have knowledge of their parent(s). Multiple parents for a component are allowed. However, be careful not to create a loop, as it is not allowed and will generate an error during loading.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;father&gt;Attribut NAME du COMPOSANT PERE #1&lt;/father&gt;\n            &lt;father&gt;Attribut NAME du COMPOSANT PERE #2&lt;/father&gt;\n            &lt;action name=\"check\" value=\"dir componentFile.txt\" /&gt;\n            &lt;action name=\"enable\" value=\"echo start &gt; componentFile.txt\" /&gt;\n            &lt;action name=\"check\" value=\"del /Q componentFile.txt\" /&gt;\n            &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"map/#the-action-tag","title":"The action TAG","text":"<p>The <code>action</code> tag is used to describe four kinds of actions:</p> <ul> <li>check: Periodic verification of the component's state at a specified frequency (in seconds). Only one <code>check</code> action is allowed per component.</li> <li>enable: Starts a component. Only one <code>enable</code> action is allowed per component.</li> <li>disable: Stops a component. Only one <code>disable</code> action is allowed per component.</li> <li>custom: Custom commands executed on demand. There can be 0 to n <code>custom</code> actions per component.</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;!-- ... --&gt;\n            &lt;action name=\"check\" value=\"dir componentFile.txt\" /&gt;\n            &lt;action name=\"enable\" value=\"echo start &gt; componentFile.txt\" /&gt;\n            &lt;action name=\"check\" value=\"del /Q componentFile.txt\" /&gt;\n            &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> Attribute Description name Required Value: Specifies the type of check. Possible values: <code>enable</code>, <code>disable</code>, <code>custom</code>. value Required The command line to execute. retryTime Optional Value: integer. Time in seconds before retrying communication with the agent. commandname Required Display name or identifier of the command. visibility Optional Controls the visibility of this custom action outside of AppControl (in XC Scenario). If set to <code>Public</code>, the AppControl worker will publish this action as a Scenario task. The default is <code>Private</code>, meaning the action will not be published. parameters Optional Used to display an icon on the map. A URL to an image (png, jpeg, or svg) can be set. You can also use one of the following values: browser, cd, chip, data-information, devices, dollar, euro, file, green-thermometer, hdd, memflash, memory, middleware, network, orange-thermometer, pounds, process, service, tools, user, yen. hostref Optional Value: string. Reference to the agent (see <code>&lt;hosts&gt;</code> tag). Required if not set on the component. authref Optional Value: string. Reference to the agent identity (see <code>&lt;auths&gt;</code> tag). Required if not set on the component."},{"location":"map/#the-parameters-tag","title":"The parameters TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;!-- ... --&gt;\n             &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> <p>The <code>parameters</code> tag is used to define the parameters of custom actions. These parameters will be available in the UI.</p> <p>The syntax for variables in AppControl is: <code>$(variableName)</code> Within the <code>parameters</code> tag, several <code>parameter</code> tags can be defined with the following attributes:</p> Attribute Description name Required The name of the variable. description Optional A description of the variable. This description is displayed in the UI. value Required The default value of the variable. canedit Optional Values: <code>True</code> (default) or <code>False</code>. If <code>False</code>, the value cannot be edited in the UI. validation Optional Value: regex. A regular expression applied to validate the value."},{"location":"map/#the-crontable-tag","title":"The crontable TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n    &lt;crontable&gt;\n        &lt;cronrules cronid=\"scheduling\"&gt;\n        &lt;trigger name=\"CRON#1\" action=\"stop\" force=\"true\" components=\"A1\" propagate=\"false\" expression=\"0 00 * * * ? *\" /&gt;\n            &lt;trigger name=\"CRON#2\" action=\"start\" force=\"true\" components=\"A1\" propagate=\"true\" expression=\"0 15 * * * ? *\" /&gt;\n            &lt;trigger name=\"customDir\" action=\"custom\" components=\"A1\" customactionname=\"dirAction\" customactionparameters=\"option=c;directory=c:\\temp\"   expression=\"0 0/5 * 1/1 * ? *\" /&gt;\n            &lt;trigger name=\"CRON#3\" action=\"stop\" expression=\"0 0/5 * 1/1 * ? *\" /&gt;\n            &lt;trigger name=\"CRON#3\" action=\"start\" expression=\"0 0/2 * 1/1 * ? *\" /&gt;\n        &lt;/cronrules&gt;\n    &lt;/crontable&gt;\n\n    &lt;app name=\"CronDemo\" version=\"v1\" cronref=\"scheduling\"&gt;\n    &lt;component name=\"A1\" description=\"A1 component\" hostref=\"LOCAL\" authref=\"LOCAL\" &gt;\n            &lt;action value=\"echo demo\" name=\"check\" /&gt;\n            &lt;action value=\"start.sh\" name=\"enable\"  /&gt;\n            &lt;action value=\"stop.sh\" name=\"disable\" /&gt;\n            &lt;action name=\"custom\" commandname=\"Perl version\" value=\"C:\\Strawberry\\perl\\bin\\perl.exe  -$(version)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"version\" value=\"V\" canedit=\"false\" validation=\"*\" /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n            &lt;action value=\"dir -$(option)  $(directory)\" visibility=\"public\" commandname=\"dirAction\" name=\"custom\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"option\" value=\"c\" canedit=\"false\" validation=\"*\" /&gt;\n                    &lt;parameter name=\"directory\" value=\"c:\\sources\\*\" canedit=\"true\" validation=\"*\" /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n    &lt;/app&gt;\n&lt;/apps&gt;\n</code></pre> <p>You can refer to the Quartz Scheduler documentation for a complete list of allowed cron expressions.</p> <p>As shown in the example above, you can include multiple cron expressions in the same file. You can schedule start/stop actions or custom actions.</p>"},{"location":"map/#built-in-wizards","title":"Built-in wizards","text":""},{"location":"map/#auto-generate-application-from-running-processes","title":"Auto-Generate Application from Running Processes","text":"<p>AppControl includes the ability to retrieve running processes on a computer through its agent. The agent, which runs on the target system (Windows or Linux), scans the machine for all active processes and reports them back to AppControl.</p> <p>In the AppControl wizard, this data is then utilized to allow you to easily create applications (also referred to as \"maps\"). The wizard displays the list of running processes, and you can select the ones you wish to include in your application definition. Once selected, AppControl automatically generates a YAML file that represents the application.</p> <p>The generated application is capable of starting, stopping, and checking the status of the selected processes. This provides a seamless way to monitor and control your applications' critical components without the need for manual configuration, ensuring that you can manage both legacy and modern systems efficiently.</p> <ul> <li>To start the wizard go to Overview/New application and select Discover your infrastructure</li> <li>Select: From Servers and then select your gateway and your agent.</li> </ul>"},{"location":"map/#auto-generate-application-from-azure-tenant","title":"Auto-Generate Application from Azure Tenant","text":"<p>AppControl includes the ability to retrieve and visualize Azure resources from your Azure tenant through its integration with Azure APIs. Using its agent which interacts directly with your Azure environment, AppControl can scan your Azure tenant for all active resources and report them back to AppControl.</p> <p>In the AppControl wizard, this data is utilized to help you easily create applications (also referred to as \"maps\"). The wizard displays a list of your Azure resources, such as virtual machines, databases, and other components, allowing you to select the ones you wish to include in your application definition. Once selected, AppControl automatically generates a YAML file that represents the application based on your Azure infrastructure.</p> <p>The generated application is capable of starting, stopping, and checking the status of the selected Azure resources, providing a seamless way to monitor and control your critical cloud components. This eliminates the need for manual configuration and ensures that you can manage both cloud-native and hybrid environments efficiently.</p> <p>Before starting the wizard, you have the good credentials.</p> <p>To use the Azure discovery feature in AppControl, you will need to create an Azure Service Principal with sufficient permissions to allow AppControl to interact with your Azure resources.</p> <p>Step 1: Create a Service Principal</p> <ol> <li>Open your terminal or command-line interface.</li> <li>Run the following command to create a service principal and assign it the \"Reader\" role (sufficient for discovery and read-only access to resources). It's better to limit the scope to specific resources but it's not mandatory.    Ensure that you replace  with your actual Azure subscription ID: <pre><code>az ad sp create-for-rbac --name \"AppControlServicePrincipal\" --role Reader  --scope /subscriptions/&lt;subscription-id&gt;/resourceGroups/&lt;resource-group-name&gt;\n</code></pre> <ol> <li>Output: The command will return a JSON object containing:</li> </ol> <p>AppId (Client ID) Password (Client secret) Tenant (Tenant ID) Subscription ID (Subscription scope where the role is assigned) Save this information securely as it will be required for configuring AppControl.</p> <p>Step 2: Assign Permissions (OPTIONAL)</p> <p>If you need to limit the service principal's permissions to specific resource groups, or if you need to grant more access (such as managing resources), you can assign additional roles. For example, to restrict access to specific resource groups, use this command:</p> <pre><code>az role assignment create \\\n    --role Reader \\\n    --assignee &lt;AppId&gt; \\\n    --scope /subscriptions/&lt;subscription-id&gt;/resourceGroups/&lt;resource-group-name&gt;\n</code></pre> <p>Step 3: Configure AppControl with the Service Principal Credentials</p> <p>Once you\u2019ve created the Service Principal, you need to provide the credentials to AppControl for authentication.</p> <ol> <li>Navigate to Overview/New application and select Discover your infrastructure.</li> <li>Choose From Azure</li> <li>Enter the Client User Name, Client Password (obtained when creating the Service Principal), Tenant ID, Subscription ID and Tenant ID.</li> </ol> <p>AppControl will use these credentials to authenticate with Azure and retrieve your resources.</p> <p>This feature empowers you to visualize and manage your entire Azure infrastructure directly from AppControl, ensuring real-time control over your cloud assets.</p>"},{"location":"repo/","title":"Git integration","text":"<p>AppControl YAML or XML files can be conveniently stored in a Git repository for version control and collaboration. Additionally, you can display the live status of your application directly in your documentation by adding a markdown badge link. For example:</p> <pre><code>![My App](https://appcontrol.xcomponent.com/core/api/badge?applicationName=MYAPP,v1@myaccount)\n</code></pre> <p>This badge will display the real-time status of your application in your documentation.</p> <p></p>"},{"location":"repo/#automating-application-deployment-with-appcontrol-apis","title":"Automating Application Deployment with AppControl APIs","text":"<p>AppControl provides powerful APIs that allow for automatic deployment of applications through custom scripts. These scripts can be integrated into your CI/CD pipelines or used for ad-hoc deployments. Below is a generic example of a script that loads and deploys an application map (in YAML or XML format) to AppControl.</p> <p>Sample Deployment Script</p> <pre><code>#!/usr/bin/env bash\nset -o errexit\nset -o nounset\n\n# API endpoint for AppControl\nexport API=${APPCONTROL_HOME:-https://appcontrol.xcomponent.com}/core\n\ndebug() {\n    [[ \"${DEBUG:-0}\" != \"0\" ]] &amp;&amp; echo \"$@\"\n}\n\nmain() {\n    # Check if the required parameters are passed\n    if [[ $# -lt 2 ]]; then\n        echo \"Usage: $0 &lt;map-file&gt; &lt;gateway-name&gt;\"\n        exit 1\n    fi\n\n    local mapFile=\"$1\"\n    local agentProxyName=\"$2\"\n    local mapFileContents=$(cat \"$mapFile\")\n\n    # Extract application name and version from the map file (XML or YAML)\n    local mapName=$(grep \"&lt;app name\" \"$mapFile\" | cut -d \"\\\"\" -f2)\n    local mapVersion=$(grep \"&lt;app name\" \"$mapFile\" | cut -d \"\\\"\" -f4)\n    local escapedMapFileContents\n\n    # Check if XML parsing failed (if mapName or mapVersion is empty, fallback to YAML)\n    if [[ -z \"$mapName\" ]] || [[ -z \"$mapVersion\" ]]; then\n        echo \"XML parsing failed or not XML format. Trying YAML...\"\n\n        # Attempt to read the file as YAML using yq\n        mapName=$(yq e '.Name' \"$mapFile\")\n        mapVersion=$(yq e '.Version' \"$mapFile\")\n\n        if [[ -z \"$mapName\" ]] || [[ -z \"$mapVersion\" ]]; then\n            echo \"YAML parsing failed. Please check the file format.\"\n            exit 1\n        fi\n    fi\n\n    # Escape file contents to be used in the JSON payload\n    escapedMapFileContents=$(echo \"$mapFileContents\" | jq -aRs .)\n\n    # Prepare the data payload for the API\n    data=$(jq -n --arg xml \"$escapedMapFileContents\" \\\n                    --arg app \"$mapName\" \\\n                    --arg version \"$mapVersion\" \\\n                    --arg gateway \"$agentProxyName\" \\\n                    '{\n                        Xml: $xml,\n                        Application: $app,\n                        Version: $version,\n                        AgentProxyName: $gateway,\n                        LoadMap: \"true\",\n                        OverWrite: \"true\",\n                        UseDefaultAgent: \"false\"\n                    }')\n\n    echo \"Loading $mapName $mapVersion using gateway $agentProxyName...\"\n\n    # Send the API request\n    curl $API/api/Configuration -X PUT \\\n         --header \"Content-Type: application/json\" \\\n         --header \"Authorization: bearer $AUTH\" \\\n         --data-binary \"$data\" \\\n         --fail\n}\n\nmain \"$@\"\n\n</code></pre> <p>Example of usage</p> <pre><code>./deploy_app.sh myapp.yaml Azure_Gateway\n</code></pre> <p>This script will upload the myapp.yaml file and use the specified gateway (Azure_Gateway).</p>"},{"location":"standalone/","title":"Running AppControl Locally with Docker Compose","text":"<p>This package lets you install and run Invivoo's X4B AppControl software locally on a Windows PC. To install X4B AppControl in standalone under Windows OS, unzip the following file into an installation directory, and move into that directory.</p>"},{"location":"standalone/#appcontrol-license-and-usage-terms","title":"AppControl License and Usage Terms","text":"<p>AppControl is free to use for educational purposes. For production use, please contact Invivoo.</p>"},{"location":"standalone/#installing-appcontrol-locally","title":"Installing AppControl Locally","text":"<p>The AppControl software is delivered as a set of container images, meant to be run inside a container orchestrator such as Kubernetes or Red Hat's OpenShift. Invivoo provides Helm charts for this installation, which is the recommended deployment method for production environments.</p> <p>For a newcomer discovering AppControl for the first time, Invivoo is providing this deployment method, using Docker Compose, to make it easy to quickly set up an AppControl instance locally, on your laptop, and immediately start exploring its possibilities.</p> <p>AppControl includes a gateway and agents that will let you manage any system, local or remote, from this local instance. Conversely, remote workstations will also be able to access and use this instance, meaning the AppControl web-based UI will be accessible from every machine on your network.</p> <p>Note that this setup is NOT recommended for production deployments.</p>"},{"location":"standalone/#requirements","title":"Requirements","text":"<p>You will need Docker Desktop on your PC. Invivoo recommends choosing WSL 2 over Hyper-V for the Linux virtualization (see installation instructions below).</p> <p>You will need at least 16 Gb of RAM and 5 Gb of available disk space.</p>"},{"location":"standalone/#installation-instructions","title":"Installation Instructions","text":""},{"location":"standalone/#docker-desktop","title":"Docker Desktop","text":"<p>To install the latest version of Docker Desktop, follow the instructions on their website.</p> <p>In the System Requirements section, choose WSL 2 backend, and follow the instructions from Microsoft to enable the feature and install WSL.</p>"},{"location":"standalone/#appcontrol-with-docker-compose","title":"AppControl with Docker Compose","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. Invivoo provides the <code>appcontrol.yml</code> file to configure AppControl's services. This lets you create and start all the services with a single command.</p> <p>Make sure that Docker Desktop is started. Open a command line tool (a normal one, administrator rights are not required), and run the following command:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml up -d\n</code></pre> <p>The command will start by retrieving all the required container images from Invivoo's DockerHub repository, this may take a few minutes. After that, the containers are started with the <code>docker run</code> command. Subsequent runs will reuse the locally-stored images.</p> <p>When the command has finished executing, you should see an output similar to this:</p> <pre><code> - Network appcontrol-compose_default                  Created                            0.8s\n - Container appcontrol-compose-rabbit-1               Started                            8.4s\n - Container appcontrol-compose-gateway-1              Started                            8.5s\n - Container appcontrol-compose-agentdebian-1          Started                            8.9s\n - Container appcontrol-compose-login-1                Started                            8.9s\n - Container appcontrol-compose-sql-1                  Started                            9.0s\n - Container appcontrol-compose-redis-1                Started                            8.3s\n - Container appcontrol-compose-webapp-1               Started                            8.8s\n - Container appcontrol-compose-notification-1         Started                           12.6s\n - Container appcontrol-compose-api-1                  Started                           15.8s\n - Container appcontrol-compose-configvalidator-1      Started                           12.2s\n - Container appcontrol-compose-agentmanager-bridge-1  Started                           15.3s\n - Container appcontrol-compose-dbaccess-1             Started                           13.7s\n - Container appcontrol-compose-scheduler-1            Started                           14.5s\n - Container appcontrol-compose-launcher-1             Started                           14.8s\n - Container appcontrol-compose-launcher-dispatcher-1  Started                           10.3s\n - Container appcontrol-compose-statistics-1           Started                           14.4s\n - Container appcontrol-compose-agentmanager-1         Started                           15.2s\n - Container appcontrol-compose-agentstatus-1          Started                           15.3s\n - Container appcontrol-compose-apps-1                 Started                           17.3s\n - Container appcontrol-compose-authentication-1       Started                           21.0s\n</code></pre> <p>The AppControl services are up and running.</p>"},{"location":"standalone/#using-the-web-interface","title":"Using the Web Interface","text":"<p>In your web browser, navigate to http://localhost:4000 to access the AppControl webapp. Use the following credentials to login:</p> <ul> <li>login: <code>admin</code></li> <li>password: <code>KoordinatorAdmin</code></li> </ul>"},{"location":"standalone/#getting-help","title":"Getting Help","text":"<p>Once you're logged into AppControl, you can access the online documentation through the help button (?) on the top right of the screen:</p> <p></p> <p>The dropdown menu also lets you contact Invivoo support through email, and join our Slack channel for access to the development team.</p>"},{"location":"standalone/#test-appcontrol-with-the-helloworld-map","title":"Test AppControl with the Helloworld map","text":"<p>The installation package includes a sample AppControl map to help you get started. In the webapp, import the sample map by clicking on the New application button and uploading the file called <code>hellowworld,v1.xml</code>.</p> <p>Here's a tutorial video to help you get started: Helloworld tutorial</p>"},{"location":"standalone/#stop-uninstall-appcontrol","title":"Stop / Uninstall AppControl","text":"<p>Run the following command to stop AppControl:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml stop\n</code></pre> <p>If you want to start again, run the following command:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml up -d\n</code></pre> <p>To completely remove AppControl, run the following command:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml rm\n</code></pre>"},{"location":"x4bcli/","title":"Introduction","text":"<p>To fully utilize AppControl's capabilities with on-premises infrastructure, the X4B Gateway is required. The gateway facilitates secure communication between your on-premises agents and the AppControl SaaS platform. This allows for real-time monitoring and control of your local applications, even when agents are deployed across diverse environments.</p> <p>X4B Gateway Overview The X4B Gateway acts as a secure link, enabling AppControl to interact with agents deployed on your local infrastructure. The gateway ensures that actions, incidents, and monitoring data are reliably communicated between the agents and the SaaS platform.</p> <p>Agent Deployment Agents can be deployed anywhere within your Information System (I.S.) to manage and monitor your local applications. One of the key benefits of the AppControl agent architecture is that agents do not require direct internet access. The agents communicate with the X4B Gateway, which handles secure data transfer to the AppControl SaaS platform.</p> <p>Getting Started with Agents To begin using agents in your local infrastructure, please refer to the Agents Installation section for step-by-step instructions on installing agents on Windows and Linux environments.</p> <p>Please refer to the Agents Installation section for detailed installation instructions.</p> <p></p> <p>Thanks to the X4B Gateway, you can deploy your applications in the AppControl Cloud Platform while keeping agents deployed on-premises.</p>"},{"location":"x4bcli/#quick-deployment-of-agents-and-gateways-windows-and-macos","title":"Quick Deployment of Agents and Gateways (Windows and macOS)","text":"<p>For both Windows and macOS, there is a quick and efficient way to deploy both agents and the X4B Gateway at the same time. This process requires administrative permissions and will prompt the user to log in to the SaaS platform to link the gateway with their user account.</p>"},{"location":"x4bcli/#windows-deployment","title":"Windows Deployment","text":"<p>To deploy the agent and gateway on Windows, use the following PowerShell script:</p> <pre><code>irm https://raw.githubusercontent.com/xcomponent/appcontrol-documentation/main/docs/en/scripts/appcontrolinstall.ps1 | iex\n</code></pre> <p>This script will:</p> <ol> <li>Install the agent and the X4B Gateway on your local machine.</li> <li>Prompt you to log in to the AppControl SaaS platform during installation to link the gateway with your user account.</li> </ol>"},{"location":"x4bcli/#macos-deployment","title":"macOS Deployment","text":"<p>To deploy the agent and gateway on macOS, use the following bash script:</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/xcomponent/appcontrol-documentation/main/docs/en/scripts/appcontrolinstallmac.sh)\"\n</code></pre> <p>This script will:</p> <ol> <li>Install the agent and the X4B Gateway on your macOS system.</li> <li>Prompt you to log in to the AppControl SaaS platform during installation to link the gateway with your user account.</li> </ol> <p>Important Notes:</p> <ul> <li>Administrative permissions are required to execute these scripts.</li> <li>The user will be prompted to log in during the installation process to complete the linkage between the gateway and the user account in the AppControl SaaS platform.</li> </ul> <p>For more detailed steps on the installation and troubleshooting, please refer to the Agents Installation section.</p>"},{"location":"x4bcli/#x4b-gateway-custom-installation","title":"X4B Gateway custom installation","text":"<p>Gateways are available for Windows and Docker. For Windows, the .NET framework is required. The X4B Gateway is necessary to take advantage of agents deployed on-premises.</p> <p>Agents can be deployed anywhere in your infrastructure. They do not need internet access.</p> <p>Please refer to the agents installation section for detailed instructions on agent installation.</p>"},{"location":"x4bcli/#latest-available-versions","title":"Latest Available Versions","text":"Operating System Format Latest Version Microsoft Windows zip Windows Gateway Zip N/A docker <code>docker pull xcomponent/x4b-gateway:latest</code>"},{"location":"x4bcli/#how-does-it-work","title":"How does it work ?","text":"<p>The first step is to log in and navigate to this page: AppControl.</p> <ol> <li> <p>Click on Register New Gateway </p> </li> <li> <p>Provide a name for your gateway and confirm.</p> </li> <li> <p>Once your gateway is created, an Access Key and a Secret Access Key will be generated. </p> </li> <li> <p>Now, you're ready to install the X4B Gateway. Please refer to the documentation below for the installation procedure.</p> </li> <li> <p>Since the X4B Gateway communicates with agents, you'll need to install at least one agent.</p> </li> <li> <p>Once your X4B Gateway and agent are up and running, you\u2019re ready to deploy a new application.</p> </li> </ol>"},{"location":"x4bcli/#retrieving-x4b-gateway-credentials","title":"Retrieving X4B Gateway Credentials","text":"<p>The first step is to retrieve the X4B Gateway credentials. Navigate to the Gateway page and note the following information:</p> <ul> <li>Name</li> <li>Access Key</li> <li> <p>Secret Access Key</p> <p></p> </li> </ul>"},{"location":"x4bcli/#microsoft-windows-platform-installation","title":"Microsoft Windows Platform Installation","text":"<p>On Microsoft Windows, the .NET Framework 4.7.2 or later is required.</p> <p>In most cases, it is already installed. Unzip the following file.</p> <p>The quickest method is to execute the following command in a PowerShell window with administrative permissions. This command will install the gateway and the agent as Windows services:</p> <pre><code>irm https://raw.githubusercontent.com/xcomponent/appcontrol-documentation/main/scripts/appcontrolinstall.ps1 | iex\n</code></pre> <p>Note:</p> <pre><code>For the other installation procedures mentioned above, we recommend using cmd.exe as the shell to install the gateway and the agent. We do not support installation via PowerShell.\n</code></pre> <p>On a prompt (cmd.exe), execute the following command line. Replace MY_ACCESS_KEY, MY_SECRET_ACCESSKEY and MY_GATEWAY_NAME with the suitable values.</p> <pre><code>c:\\x4b&gt; x4b run gateway -a MY_ACCESS_KEY -k MY_SECRET_ACCESSKEY -p MY_GATEWAY_NAME [-l Trace]\n</code></pre> <p>You can also, set the following environment variables:</p> <pre><code>c:\\x4b&gt; set X4B_ACCESS_KEY = MY_ACCESS_KEY\nc:\\x4b&gt; set X4B_SECRET_ACCESS_KEY = MY_SECRET_ACCESSKEY\nc:\\x4b&gt; set X4B_PROXY_NAME = MY_GATEWAY_NAME\n</code></pre> <p>If the configuration is correct, you should see the following lines in the terminal:</p> <pre><code>  __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2021\n25/02/2021 09:15:20# X4B Gateway is up and running... (Press Ctrl+C to exit)\n25/02/2021 09:15:21# Waiting for websocket connection\n25/02/2021 09:15:39# HeartBeat successfully published\n25/02/2021 09:15:39# Websocket connection established\n\n</code></pre>"},{"location":"x4bcli/#microsoft-windows-service-installation","title":"Microsoft Windows service Installation","text":"<p>In a prompt with administrative permissions:</p> <pre><code>c:\\x4b&gt; x4b install -servicename x4bGatewayServiceName  -server \"https://appcontrol.xcomponent.com/core\" -loglevel \"Trace\" -access \"myAccesToken\" -proxyname \"myGatewayName\" -secret \"mySecretToken\"\n</code></pre> <p>The first parameters to register the gateway as a service is the topshelf syntax:</p> <p>Topshelf Command-Line Reference \u2014 Topshelf 3.0 documentation</p> <p>The following parameters are specific to the gateway:</p> <p>-server \"https://appcontrol.xcomponent.com/core\" -loglevel \"Trace\" -access \"myAccesToken\" -proxyname \"myGatewayName\" -secret \"mySecretToken\"</p>"},{"location":"x4bcli/#docker-installation","title":"Docker Installation","text":"<p>The docker image is available on docker hub: x4b-gateway</p> <pre><code>docker run -e X4B_ACCESS_KEY=MY_ACCESS_KEY -e X4B_SECRET_ACCESS_KEY=MY_SECRET_ACCESSKEY -e X4B_PROXY_NAME=MY_GATEWAY_NAME xcomponent/x4b-gateway:latest\n</code></pre> <p>If the configuration is correct, you should observe the following lines in the terminal:</p> <pre><code>  __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2021\n25/02/2021 09:15:20# X4B Proxy is up and running... (Press Ctrl+C to exit)\n25/02/2021 09:15:21# Waiting for websocket connection\n25/02/2021 09:15:39# HeartBeat successfully published\n25/02/2021 09:15:39# Websocket connection established\n\n</code></pre>"},{"location":"x4bcli/#display-environment-variables","title":"Display environment variables","text":"<pre><code>c:\\x4b&gt;x4b env\n</code></pre>"},{"location":"x4bcli/#install-and-run-the-gateway-with-docker-and-builtin-command-of-the-gateway","title":"Install and run the gateway with docker and builtin command of the gateway","text":"<pre><code>c:\\x4b&gt;x4b run docker -a|--accesskey &lt;accesskey&gt; -k|--secretaccesskey &lt;secretaccesskey&gt; -p|--gatewayname &lt;gatewayname&gt; [-l|--loglevel &lt;loglevel&gt;] [-i|--imagetag &lt;imagetag&gt;] [-u|--urlserver &lt;urlserver&gt;]\n</code></pre>"},{"location":"x4bcli/#remove-appcontrol-gateway-service-from-the-workstation","title":"Remove Appcontrol Gateway service from the workstation","text":"<pre><code>c:\\x4b&gt;x4b uninstall -servicename x4bGatewayServiceName\n</code></pre>"},{"location":"x4bcli/#remove-appcontrol-gateway-container-running-with-docker","title":"Remove Appcontrol Gateway container running with Docker","text":"<pre><code>c:\\x4b&gt;x4b uninstall docker -c|--containername MY_GATEWAY_NAME\n</code></pre>"},{"location":"x4bcli/#display-help","title":"Display Help","text":"<p>x4b -v|--version x4b [command] -h x4b subcommand [command] -h|--help</p> <pre><code>c:\\x4b&gt;x4b -h // display list of commands available\nc:\\x4b&gt;x4b run -h // display help for command run\nc:\\x4b&gt;x4b run docker -h //display help for the subcommand\nc:\\x4b&gt;x4b run gateway -h // display help for the subcommand\nc:\\x4b&gt;x4b uninstall docker -h // display help for this specific command\n</code></pre>"},{"location":"x4bcli/#check-appcontrols-agent-communication","title":"Check AppControl's Agent Communication","text":"<p>The gateway can also be useful for checking if the agent is up and running. Agents can be deployed on the same computer as the gateway or elsewhere on the network.</p> <p>For example, if you have deployed an agent on the host <code>myhost</code> and the gateway is deployed elsewhere in the network, open <code>cmd.exe</code> and enter the following command:</p> <pre><code>c:\\x4b&gt;x4b run interactive --host myhost\n</code></pre> <p>This is the list of allowed parameters:</p> Parameters Description Example --host Agent host name x4b run interactive --host MYHOST --port Agent port value x4b run interactive --host MYHOST --port 12345 --ssl Ssl protocol: Tls, Tls12, Tls13 x4b run interactive --host MYHOST --port 12345 --ssl Tls12 --loglevel Log Level: Error, Info, Trace x4b run interactive --host MYHOST --port 12345 --ssl Tls12 --loglevel Error <p>If the gateway can't reach the agent, you will obtain the following output:</p> <pre><code>c:\\x4b&gt;x4b run interactive --host myhost\nLaunching gateway in interactive mode...\n __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2023\n\n12/09/2023 17:08:52# X4B Gateway is up and running... (Press Ctrl+C to exit)\n\n12/09/2023 17:08:55# Connection to agent fails - Retrying in few seconds...\n</code></pre> <p>If the gateway is able to reach the agent, you will obtain the following output:</p> <pre><code>C:\\&gt;x4b run interactive --host localhost\nLaunching gateway in interactive mode...\n __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2023\n\n12/09/2023 17:11:53# X4B Gateway is up and running... (Press Ctrl+C to exit)\n\n12/09/2023 17:11:54# Connection to agent established\n\n12/09/2023 17:11:54#\n***************************************\nAgent configuration:\nVersion=26.0\nPlatform=Windows\nCpu Usage=15%\nnetworkAddress=0.0.0.0\nport=12567\nlogdirectory=C:\\tools\\appcontrol\\xcAgent-binary\\./logs\ntempdirectory=C:\\Windows\\TEMP\nmaxlogsizeinmo=5\nnbdaystodeletelogs=10\nredirecterroutput=1\nexecutionthreshold=200\nloglevel=TRACE\ntrustedservers=\nsslprotocol=tls12\nsshkeydirectory\nshell=\nignoretrustedservers=false\nserviceaccount=\nwindows Interpreter=C:\\Windows\\system32\\cmd.exe\n\n***************************************\n\nappControlAgent@localhost %\n</code></pre> <p>The gateway is able to reach both Linux and Windows agents.</p> <p>Once connected, you can execute commands on the agent's host. For example, you can use <code>cd</code>, <code>dir</code>, <code>more</code> for Windows, or <code>pwd</code>, <code>ls</code>, <code>cat</code> for Linux.</p> <p>The commands are executed by the default shell, which is <code>cmd.exe</code> for Windows and <code>sh</code> or <code>bash</code> for Linux.</p> <p>Example with a Windows agent:</p> <pre><code>appControlAgent@localhost % dir\n\n R\u00e9pertoire de C:\\tmp\\test\\xcAgent-binary-Win32\n\n12/09/2023  17:31    &lt;DIR&gt;          .\n12/09/2023  17:31    &lt;DIR&gt;          ..\n11/09/2023  14:15               940 config.dat\n11/09/2023  14:31                87 install.bat\n26/03/2018  23:45         2?094?592 libcrypto-1_1.dll\n26/03/2018  23:45           375?808 libssl-1_1.dll\n12/09/2023  17:32    &lt;DIR&gt;          logs\n26/03/2018  23:45           970?912 msvcr120.dll\n11/09/2023  14:29           953?856 xcAgent.exe\n               6 fichier(s)        4?396?195 octets\n               3 R?p(s)  96?394?911?744 octets libres\n\nappControlAgent@localhost C:\\tmp\\test\\xcAgent-binary-Win32% powershell -c cat config.dat\n\n12/09/2023 17:35:25# &lt;!-- XComponent APP Control Agent Configuration file --&gt;\n&lt;config&gt;\n  &lt;item key=\"generatebatch\" value=\"false\" /&gt;\n  &lt;item key=\"windowsinterpreter\" value=\"%ComSpec%\" /&gt;\n  &lt;item key=\"networkAddress\" value=\"0.0.0.0\" /&gt;\n  &lt;item key=\"port\" value=\"12567\" /&gt;\n  &lt;item key=\"logdirectory\" value=\"./logs\" /&gt;\n  &lt;item key=\"tempdirectory\" value=\"%TEMP%\" /&gt;\n  &lt;item key=\"maxlogsizeinmo\" value=\"5\" /&gt;\n  &lt;item key=\"nbdaystodeletelogs\" value=\"10\" /&gt;\n  &lt;item key=\"redirecterroutput\" value=\"true\" /&gt;\n  &lt;item key=\"logToStandardOutput\" value=\"true\" /&gt;\n  &lt;item key=\"executionthreshold\" value=\"200\" /&gt;\n  &lt;item key=\"loglevel\" value=\"TRACE\" /&gt; &lt;!-- NONE, INFO, TRACE, ERROR --&gt;\n  &lt;item key=\"trustedservers\" value=\"\" /&gt;\n  &lt;item key=\"ignoretrustedservers\" value=\"false\" /&gt;\n  &lt;item key=\"sslprotocol\" value=\"tls12\" /&gt; &lt;!-- ssl, tls, tls12, tls13 --&gt;\n  &lt;item key=\"sshkeydirectory\" value=\"\" /&gt;  &lt;!-- Linux Only --&gt;\n  &lt;item key=\"shell\" value=\"\" /&gt;\n&lt;/config&gt;\n\nappControlAgent@localhost C:\\tmp\\test\\xcAgent-binary-Win32%\n</code></pre> <p>Example with debian's agent:</p> <pre><code>appControlAgent@macbook % ls\n\n12/09/2023 17:36:56# config.dat\nconfig_env.dat\nlibs\nlogs\nrun.sh\ntmp\nxcAgent.bin\n\nappControlAgent@macbook /usr/src/app/xcagent% cat config.dat\n\n12/09/2023 17:37:23# &lt;!-- XComponent APP Control Agent Configuration file --&gt;\n&lt;config&gt;\n  &lt;item key=\"networkAddress\" value=\"0.0.0.0\" /&gt;\n  &lt;!--TCP listening port of the agent --&gt;\n  &lt;item key=\"port\" value=\"12567\" /&gt;\n  &lt;item key=\"generatebatch\" value=\"true\" /&gt;\n  &lt;!--Logs and Tmp directories--&gt;\n  &lt;item key=\"logdirectory\" value=\"logs\" /&gt;\n  &lt;item key=\"tempdirectory\" value=\"tmp\" /&gt;\n  &lt;item key=\"maxlogsizeinmo\" value=\"5\" /&gt;\n  &lt;item key=\"nbdaystodeletelogs\" value=\"10\" /&gt;\n   &lt;item key=\"redirecterroutput\" value=\"true\" /&gt;\n  &lt;item key=\"executionthreshold\" value=\"50\" /&gt;\n   &lt;item key=\"logToStandardOutput\" value=\"true\" /&gt;\n  &lt;item key=\"loglevel\" value=\"TRACE\" /&gt; &lt;!-- NONE, INFO, TRACE, ERROR --&gt;\n   &lt;!-- IP address of SSH serveur (unix/linux) --&gt;\n  &lt;item key=\"sshhost\" value=\"127.0.0.1\" /&gt;\n  &lt;!-- IP Address or DNS Names of AC2 servers authorized to communicate with the agent --&gt;\n  &lt;item key=\"trustedservers\" value=\"\" /&gt;\n  &lt;item key=\"sslprotocol\" value=\"tls12\" /&gt;  &lt;!-- ssl, tls, tls12 --&gt;\n  &lt;item key=\"sshkeydirectory\" value=\"\" /&gt;  &lt;!-- Linux Only --&gt;\n  &lt;item key=\"shell\" value=\"\" /&gt;\n&lt;/config&gt;\nappControlAgent@macbook /usr/src/app/xcagent%\n</code></pre>"}]}