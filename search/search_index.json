{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"AppControl Documentation <p>   AppControl reduces your applications downtimes by letting you react quickly to an ongoing incident.       Supplementing your existing monitoring and supervision tools, AppControl acts on your applications to restart, repair, execute any custom actions, as you wish, on your information system.       AppControl empowers your teams, increases their confidence level and lowers their stress during operations. </p>"},{"location":"#get-started","title":"Get Started","text":"<ul> <li>Go to the XComponent AppControl website.</li> <li>Log in using a social provider</li> <li>That's all, you are logged!</li> </ul> <p>In the example section, copy the following link to the demo application: demo application.</p> <p>On the AppControl website, go to the Import Application and paste the link of the demo application.</p> <p>Follow the wizard (clicking on 'Next' button). In the 'Gateway' tab select 'X4B SaaS'. On the last tab click on 'Import'.</p> <p></p> <p>Go the 'Overview', and select the helloworld application by clicking on the checkbox. Then click on the load button. </p> <p>Click on the 'Architecture' button:</p> <p></p> <p>Using, the command bar, it's easy to start/stop the Hello World application. </p>"},{"location":"#objectives","title":"Objectives","text":"<ul> <li>Find root cause with no human intervention</li> <li>Eliminate human error when restarting</li> <li>Keep operational procedures tested and up-to-date</li> </ul> <p>AppControl allows you to both monitor the status of applications in real time but above all to act when an incident occurs. Where monitoring software signals you problems, AppControl offers to correct them. </p> <p> </p>"},{"location":"#how-it-works","title":"How it Works","text":"<p>In AppControl, an application is a hierarchy of components.  A component have several commands:</p> <ul> <li>A check command to retrieve the current state</li> <li>A start command</li> <li>A stop command</li> <li> <p>And some optionals custom commands</p> </li> <li> </li> <li>A component can only starts if its parent's components are started.</li> <li>A component can only stops if its children's components are stopped.</li> </ul>"},{"location":"#dependencies-behaviour","title":"Dependencies behaviour","text":""},{"location":"#diagnostic","title":"Diagnostic","text":"<p>In this situation, there are 2 issues:</p> <ul> <li>2 components are stopped whereas there parents are started</li> </ul> <p>--&gt; AppControl has detected the issues.</p> <p></p>"},{"location":"#resolution","title":"Resolution","text":"<ol> <li>AppControl stops orphans components</li> </ol> <ol> <li>Healthy situation, we are ready to restore the services</li> </ol> <ol> <li>Restart by branch</li> </ol> <ol> <li>Normal situation</li> </ol>"},{"location":"agents/","title":"AppControl Agents","text":""},{"location":"agents/#latest-available-versions","title":"Latest Available versions","text":"Operating System Version Format Latest version Microsoft Windows 32 bits All Versions zip Windows Agent32 Zip Microsoft Windows 64 bits All Versions zip Windows Agent64 Zip Alpine 3.18.3 tar.gz Alpine tar.gz Alma Linux (EL) 8.8 (Compatibility with RedHat 8) tar.gz Alma8 tar.gz Alma Linux (EL) 9.2 (Compatibility with RedHat 9) tar.gz Alma9 tar.gz Rocky Linux (EL) 8.8 (Compatibility with RedHat 8) tar.gz Rocky8 Linux Rocky Linux (EL) 9.2 (Compatibility with RedHat 9) tar.gz Rocky9 Linux Debian 11.7 tar.gz Debian11 tar.gz Debian 12.1 tar.gz Debian12 tar.gz Alpine alpine:3.18.3 docker docker pull xcomponent/appcontrol-agent:latest-alpine Alma Linux (EL) almalinux:8.8-minimal (Compatibility with RedHat 8) docker docker pull xcomponent/appcontrol-agent:latest-almalinux Alma Linux (EL) almalinux:9.2-minimal (Compatibility with RedHat 9) docker docker pull xcomponent/appcontrol-agent:latest-almalinux Debian debian:11.5-slim docker docker pull xcomponent/appcontrol-agent:latest-debian Rocky Linux (EL) rockylinux:8.8-minimal (Compatibility with RedHat 8) docker docker pull xcomponent/appcontrol-agent:latest-rockylinux Rocky Linux (EL) almalinux:9.2-minimal (Compatibility with RedHat 9) docker docker pull xcomponent/appcontrol-agent:latest-rockylinux <p>All binaries versions are listed here: All binaries versions</p> <p>All docker versions are listed here: All docker versions</p>"},{"location":"agents/#microsoft-windows-platform","title":"Microsoft Windows Platform","text":"<p>Note:</p> <pre><code>We recommand to use cmd.exe as a shell to install the agent. We don't offer the support for installation through powershell.\n</code></pre> <p>To install XComponent AppControl Agent under Windows OS, unzip the following file into an installation directory. The configuration file ( config.dat ) is located in the same directory. Refer to the agent configuration section to customize the configuration. You have 2 options:   - Install an run the agent as a Microsoft Windows Service   - Run the agent in interactive mode (in a cmd.exe)</p>"},{"location":"agents/#option-1-install-and-start-the-agent-as-a-microsoft-windows-service","title":"Option 1. Install and start the agent as a Microsoft Windows Service","text":"<ul> <li>To register the program in the service registry of the Microsoft\ufffd Windows machine execute the following command in a prompt (cmd.exe) with administrative permissions:</li> </ul> <pre><code>C:\\appcontrol&gt;xcAgent --install --servicename XComponentAppControlAgent\nXComponent App Control Agent, version 9.9\nCopyright \u00a9 Invivoo Software 2022\nXComponent AppControl service name: XComponentAppControlAgentXComponent AppControl service display name: XComponent AppControl AgentXComponentAppControlAgent is installed.\n</code></pre> <ul> <li>We can either specify the display service name during registration: </li> </ul> <pre><code>C:\\appcontrol&gt;xcAgent.exe --install --servicename appcontrolagent --servicedisplayname \"Agent AppControl\"\nXComponent App Control Agent, version 9.9\nCopyright \u00a9 Invivoo Software 2022\nXComponent App Control service name: appcontrolagent\nXComponent App Control service display name: Agent AppControl\nappcontrolagent is installed.\n</code></pre> <ul> <li>Uninstalling the agent can be done also with the following command line:</li> </ul> <pre><code>C:\\appcontrol&gt;xcAgent.exe --uninstall --servicename appcontrolagent\nXComponent App Control Agent, version 9.9\nCopyright \u00a9 Invivoo Software 2022\nappcontrolagent has been uninstalled.\n</code></pre> <ul> <li>Start the service XComponent AppControl Agent</li> </ul>"},{"location":"agents/#option-2-run-the-agent-in-interactive-mode-from-a-prompt-cmdexe","title":"Option 2. Run the agent in interactive mode from a prompt (cmd.exe)","text":"<p>Run cmd.exe and the go the agent folder.</p> <pre><code>C:\\appcontrol&gt;xcAgent.exe --console\nXComponent AppControl Agent, version 7.0.0-R1\nCopyright \u00a9 Invivoo Software 2022\n\n</code></pre>"},{"location":"agents/#adding-a-microsoft-windows-firewall-port-rule-optional-step","title":"Adding a Microsoft Windows firewall port rule (optional step)","text":"<p>If you need to communicate with the agent from another computer, you should need to create a firewall rule to open the agent's port. </p> <p>In the case the agent's port is 12567, the command above creates the correct rule on the firewall.</p> <p>Run cmd.exe (with Administrative permissions) and then execute the following command.</p> <pre><code>C:\\&gt;netsh advfirewall firewall add rule name=\"AppControl-AgentRule\" dir=in action=allow protocol=TCP localport=12567    \n\n</code></pre> <p>You can check that the rule is correctly created with this command:</p> <pre><code>C:\\&gt;netsh advfirewall firewall show rule name=\"AppControl-AgentRule\"\n</code></pre> <p>Please refer to the following link to check if the agent port is reachable.</p> <p>Note:</p> <pre><code>If you are using another firewall or and anti-virus, you should refer to the corresponding documentation.\n</code></pre>"},{"location":"agents/#enterprise-linux","title":"Enterprise Linux","text":"<p>At the moment EL versions of XComponent AppControl Agent are Rocky Linux and Alma Linux.</p> <p>To install XComponent AppControl Agent under EL, untar the following Alma tar.gz into an installation directory (Tarball file). The configuration file ( config.dat ) is located in the same directory. Refer to the agent configuration section to customize the configuration.</p> <p>Replace /home/xc/xcagent by your own installation folder.</p> <pre><code>/home/xc/xcagent $ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/xc/xcagent/libs\n/home/xc/xcagent $ ./xcAgent.bin --file /home/xc/xcagent/config.dat\n\nXComponent AppControl Agent, version 7.0.0-R1\nCopyright \ufffd Invivoo Software 2022\n\n</code></pre>"},{"location":"agents/#agentless-linux-unix","title":"Agentless Linux &amp; Unix","text":"<p>From an XComponent AppControl Linux agent, you can enable AgentLess mode via SSH2. This mode allows a Linux XComponent AppControl Agent to forward actions provided by the AppControl server under a non permanent Ssh channel to the IP address and account configured in the agent configuration file. Refer to the agent configuration section to customize the configuration.</p>"},{"location":"agents/#docker-installation","title":"Docker Installation","text":"<p>The docker image of the agent is available here on docker hub.</p> <p>You can pull the docker image using the following command line:</p> <pre><code>root $ docker pull xcomponent/appcontrol-agent:latest\n</code></pre> <p>Environment variables exposed by the docker image are the following:</p> Variable Description CONFIG_FILE_PATH Path to the config.dat TRUSTED_SERVERS List of IP addresses, or Dns names of XComponent AppControl servers authorized to contact the agent (Can be empty) LOG_LEVEL Log levels ('NONE', 'ERROR', 'INFO', 'TRACE') PORT Default value: 12567. Port used as the agent's TCP listening port. Numerical format. NB_DAYS_TO_DELETE_LOGS Default value: 0. Retention period for trace files archived under logdirectory /logs-backup/ (In number of days) LOG_STANDARD_OUTPUT Default value: true. Boolean value (true or false). If true redirect all the logs to std output <p>Some Technicals Points:</p> <ol> <li>If your agent needs to access to local resources (eg: scripts), you have 2 ways to achieve this:</li> <li>Inherits from this docker image and create your own image</li> <li>Or you can map a directory to the docker image</li> </ol> <p>Running the docker image:</p> <pre><code>root $ docker run -p 12567:12567 xcomponent/appcontrol-agent:latest\n</code></pre>"},{"location":"agents/#agent-configuration","title":"Agent Configuration","text":"<p>The default configuration file is name config.dat. It's located near the XComponent AppControl Agent configuration file.</p> <pre><code>&lt;config&gt;\n  &lt;item key=\"networkAddress\"     value=\"127.0.0.1\" /&gt;\n  &lt;item key=\"port\"               value=\"12567\" /&gt;\n  &lt;item key=\"checktimeout\"       value=\"20\" /&gt;\n  &lt;item key=\"logdirectory\"       value=\"log\" /&gt;\n  &lt;item key=\"tempdirectory\"      value=\"tmp\" /&gt;\n  &lt;item key=\"maxlogsizeinmo\"     value=\"5\" /&gt;\n  &lt;item key=\"nbdaystodeletelogs\" value=\"10\" /&gt;\n  &lt;item key=\"executionthreshold\" value=\"30\" /&gt;\n  &lt;!--Log level : NONE, INFO, TRACE, ERROR --&gt;\n  &lt;item key=\"loglevel\"           value=\"INFO\" /&gt;\n  &lt;item key=\"trustedservers\"     value=\"127.0.0.1\" /&gt;\n  &lt;item key=\"sshhost\"            value=\"127.0.0.1\" /&gt;\n  &lt;item key=\"sshkeydirectory\"    value=\"sshkeys\" /&gt;\n&lt;/config&gt;\n</code></pre> Key Description networkAddress IP address used to open the agent's TCP listening port. A.B.C.D format (0.0.0.0 for all interfaces of the machine) port Port used as the agent's TCP listening port. Numerical format. checktimeout Maximum time allowed for a check command. Once this period has passed, the check order is considered completed. (In seconds) logdirectory Agent's trace file recording directory. tempdirectory Agent's working directory maxlogsizeinmo Maximum size before rotation of the trace file (In Megabytes) nbdaystodeletelogs Retention period for trace files archived under logdirectory /logs-backup/ (In number of days) loglevel Log levels ('NONE', 'ERROR', 'INFO', 'TRACE') executionthreshold Maximum number of parallel executions for (Start/Stop/Custom actions). This parameter is not applied on check actions. trustedservers List of IP addresses, or Dns names of XComponent AppControl servers authorized to contact the agent (Can be empty) ignoretrustedservers Disable trusted server option sshhost This parameter allows the agent to perform an SSH session with the account specified in the configuration of the application. The file containing the private key to use is located in the 'sshkeydirectory' directory and bears the name of the targeted user.This property works exclusively on Linux agent. sshkeydirectory Directory for storing Ssh private key files. The name of the expected files must be named with the name of the user targeted by the application configuration. The public key must be present in the ~/ssh/authorized_keys file of the remote account"},{"location":"agents/#environment-variables-configuration","title":"Environment variables configuration","text":"<p>Config.dat configuration supports environment variables as a value.</p> <p>Under Microsoft Windows:</p> <p>In config.dat you can use environment variables with the following pattern: %VARIABLE%.</p> <pre><code>&lt;config&gt;\n...\n  &lt;item key=\"tempdirectory\" value=\"%TEMP%\" /&gt;\n...\n&lt;/config&gt;\n</code></pre> <p>Under Linux/Unix:</p> <p>In config.dat you can use environment variables with the following pattern: $VARIABLE.</p> <pre><code>&lt;config&gt;\n...\n   &lt;item key=\"tempdirectory\" value=\u201d$TEMP\" /&gt;\n...\n&lt;/config&gt;\n</code></pre> <p>Note:</p> <pre><code>Each item key of the config.dat file can be overriden  by an environment variable named XC_MYITEMKEYINUPPERCASE. The priority is the following:\n1. If an XC_... variable exists the agent will use it\n2. The values in the config.dat are used only if the XC_... variables don't exist.\n\nExample: \nif an env variable named XC_TEMPDIRECTORY exists, this value will be used instead of the variable 'tempdirectory' defined in the config.dat.\n\n</code></pre>"},{"location":"agents/#checking-that-agents-port-is-opened","title":"Checking that agent's port is opened","text":"<p> In some situations, we need to check that the agent's port is correctly bind and accessible from another computer.</p> <ol> <li>Checking that the agent binds on its port (locally):</li> </ol> <pre><code>curl localhost:12567\n</code></pre> <p>If the agent is running, the expected message is:</p> <pre><code>curl: (52) Empty reply from server\n</code></pre> <p>If the agent is not running, the  message is:</p> <pre><code>curl: (7) Failed to connect to localhost port 12567 after 2267 ms: Couldn't connect to server\n</code></pre> <ol> <li>Checking that the agent binds on its port (from a remote machine):</li> </ol> <pre><code>curl mymachine:12567\n</code></pre> <p>If the agent is running, the expected message is:</p> <pre><code>curl: (52) Empty reply from server\n</code></pre> <p>If the agent is not running or unreachable (for example behind a firewall), the  message is:</p> <pre><code>curl: (7) Failed to connect to mymachine port 12567 after 2267 ms: Couldn't connect to server\n</code></pre> <p>Note:</p> <pre><code>You can use the AppControl Gateway to both check agent connectivity and also to execute commands on the agent host.\n</code></pre> <p>Please refer to the following link</p>"},{"location":"bestpractices/","title":"Agents/Gateways configuration best practices","text":"<p>According to your configuration, differents badges will be displayed in the UI. The badges are indicators which are used to secure your I.S (Information System).</p> <p>The badges are displayed in the Agents view.</p> <p></p>"},{"location":"bestpractices/#protocol-badges","title":"Protocol badges","text":"<ul> <li>The first badge encourages the use of a recent version of the Tls protocol:</li> </ul> Protocol Badge Tls13 Tls12 Tls - Ssl"},{"location":"bestpractices/#gateway-badges","title":"Gateway badges","text":"<ul> <li>The second badge encourages the use of a gateway to access agents. Indeed, the gateways are there to guarantee a stronger isolation at the network level and at the application level.</li> </ul> Number of gateways by agent Badge At least one None"},{"location":"bestpractices/#resilience-badges","title":"Resilience badges","text":"<ul> <li>The third badge encourages the use of several sites (at least primary and secondary). This declaration of the different sites is configured using the \"trustedservers\" variable in the agent's config.dat file. If \"ignoretrustedservers\" a \"gold medal\" will be displayed.</li> </ul> Number of servers declared in \"trustedserver\" Badge At least two One None"},{"location":"centreon/","title":"Centreon Import","text":"<p>The X4B platform includes a mechanism for importing your current Centreon (or Nagios) setup. This allows you to start off with a draft AppControl map file which includes all the hosts and services that you have defined in your Centreon configuration.</p>"},{"location":"centreon/#appcontrol-map","title":"AppControl map","text":"<p>The import will create one AppControl component for each host, and one for each service, with the host component being designated as a parent of the service component. The parent-child relationship denotes a dependency relation, where the child depends on a properly working parent to perform its own function.</p> <p>You can designate one of your servers as a bastion host. If you do, it is assumed that you will deploy an AppControl agent on it, and then that server will be used to run remote checks on other hosts, using the ping or ssh commands, for example.</p> <p>By default, the host components have a check command that does ping -c 1 &lt;hostname&gt;. The service components are created with sample check, start, and stop commands that simulate the actual checks using a temporary file. All these default commands assume the agent is running on a linux machine, but you can also configure your map to deploy the agents on Windows servers (see xxx for more details on AppControl agents).</p>"},{"location":"centreon/#importing-your-setup","title":"Importing your setup","text":"<p>The import tool is a Windows binary that you can download from here. To import your setup, first log on to your Centreon server, and export your configuration to a text file, with the following command:</p> <pre><code>centreon -u &lt;admin_user&gt; -p &lt;admin_password&gt; -e &gt; centreon_export.txt\n</code></pre> <p>Second, run the import tool, specifying your export file as the input file:</p> <pre><code>ac_from_centreon.exe -f centreon_export.txt -n CentreonExported -v 1.0\n</code></pre> <p>This creates a file called CentreonExported,1.0.xml in the current directory (you are free to pick any name and version you want, see the available options below). You can open this file in the editor of your choice to inspect or edit it, and you can upload it to AppControl with the New button on the AppControl UI. Other options are available:</p> <pre><code>Usage: ac_from_centreon.exe OPTIONS\nOptions:\n    -f &lt;filepath&gt;\n    -r | --root-host &lt;hostname&gt;\n    -b | --bastion-host &lt;hostname&gt;\n    -n &lt;map name&gt; (required)\n    -v &lt;version&gt; (required)\n    -o &lt;map_filepath&gt;\n</code></pre> <p>The --root-host option lets you specify one server as being the root, in the AppControl architecture map, of the servers graph. This indicates that all the other server depend on this one; you would typically choose a server playing some essential role, such as a DNS server.</p> <p>The --bastion-host option lets specify one server as being the bastion, as described above.</p> <p>The -n and -v options are required, they define the map name and version. If no path is given for the map file, then the file gets created in the current directory, with the name &lt;map_name&gt;,&lt;version&gt;.xml; alternatively, you may specify a different path and name using the -o option. </p>"},{"location":"cli/","title":"AppControl Cli","text":""},{"location":"cli/#latest-available-versions","title":"Latest Available versions","text":"Operating System Format Latest version Microsoft Windows / Linux zip AppControl Cli Zip N/A docker docker pull xcomponent/appcontrol-cli:latest"},{"location":"cli/#objectives","title":"Objectives","text":"<p>AppControl Cli is intended to start/stop/load/suspend Appcontrol's applications from the command line. This tool is mainly used to integrate AppControl in a scheduler/workload automation software. </p>"},{"location":"cli/#installation","title":"Installation","text":"<p>...</p>"},{"location":"cli/#configuration","title":"Configuration","text":"<p>...</p>"},{"location":"cmdb/","title":"AppControl CMDB Integration","text":"<p>AppControl can be integrated with a Configuration Management Database (cmdb).</p> <p>AppControl currently supports ServiceNow as a cmdb provider, but other providers such as iTop or EasyVista can also be considered. </p>"},{"location":"cmdb/#use-cases","title":"Use Cases","text":"<p>There can be several use cases for integrating AppControl and a cmdb:</p> <ul> <li>conformity check between operational reality and cmdb referential</li> <li>map (eg: AppControl Application) provisioning based on cmdb data </li> </ul>"},{"location":"cmdb/#conformity-check","title":"Conformity check","text":"<p>In the first use case, whenever a map is loaded, AppControl checks whether the objects declared in the map are present in the cmdb, and produces a report listing the elements that were found missing.</p> <p>Currently, nothing is ever added to the cmdb; a future version may offer the possibility for the user to choose whether to populate the cmdb with elements from the map.</p>"},{"location":"cmdb/#map-provisioning","title":"Map provisioning","text":"<p>In the second use case, the cmdb acts as the configuration repository for AppControl artefacts, such as the Component. For example, the cmdb may hold a standard set of actions that are expected to be present in certain components: when the actions are found to be missing in the map, they can be copied from the cmdb, ensuring that the Components in the operational reality match the cmdb view of the world.</p> <p>Eventually, it might be possible to generate entire maps from the cmdb, thereby ensuring automatic conformity. </p>"},{"location":"cmdb/#cmdb-integration-howto","title":"Cmdb Integration HOWTO","text":""},{"location":"cmdb/#cmdb-access-and-credentials","title":"Cmdb access and credentials","text":"<p>The first step is to define one or more cmdb objects in AppControl. In the Referential section at the bottom of the left-hand side panel, press the CMDB button to display the page where you can manage access to various CMDBs:</p> <p></p> <p>To register a new ServiceNow CMDB, press the register button and fill in the fields:</p> <ul> <li><code>Name</code> is the local AppControl identifier for this cmdb</li> <li><code>User</code>/<code>Password</code> are your credentials on the ServiceNow server</li> <li><code>ServiceNow Url</code> identifies the ServiceNow server you wish to use</li> </ul> <p>Once a cmdb has been defined, you can reference it in the map import wizard, to request a validation of the map being imported.</p>"},{"location":"cmdb/#map-import-wizard","title":"Map Import Wizard","text":"<p>When importing a new map file, the fifth step is the CMDB validation, where you are presented with the list of available cmdbs. </p> <p></p> <p>Make sure the cmdb server you want to use is up and running at this point. Click on its name and press Next. A progress bar indicates that validation is taking place (this can take a few moments). If every element in the map is matched to a corresponding element in the cmdb, a message will indicate that the validation has succeeded:</p> <p></p> <p>If the verification process detected configuration information in the cmdb that was not in the map (such as Component actions) this will also be indicated:</p> <p></p> <p>If any discrepancies were found when comparing the map to the cmdb, a report is shown listing the elements that were found to be missing:</p> <p></p>"},{"location":"cmdb/#understanding-the-servicenow-integration","title":"Understanding the ServiceNow integration","text":"<p>The following sections detail the mapping choices that were made to represent AppControl data in ServiceNow. Keep in mind that ServiceNow is very much configurable, and even lets you define custom data tables, so any integration might require specific work. </p>"},{"location":"cmdb/#mapping-between-appcontrol-and-servicenow","title":"Mapping between AppControl and ServiceNow","text":"<p>The following table shows the correspondance between AppControl concepts or objects, and ServiceNow resources.</p> AppControl ServiceNow Object ServiceNow Table Application Application cmdb_ci_appl Host Computer cmdb_ci_computer Component Service cmdb_ci_service Component hostref Computer-Service Relation cmdb_ci_rel Action Commands cmdb_running_process"},{"location":"cmdb/#representing-components-actions-in-servicenow","title":"Representing Components actions in ServiceNow","text":"<p>Each Component in AppControl has a mandatory <code>hostref</code> attribute linking to the server where the component is hosted. This link is represented by a ServiceNow <code>Depends on::Used by</code> relation.</p> <p>The actions defined on a Component are stored in the RunningProcess table (cmdb_running_process), with a link to the corresponding host. Here's the detailed mapping on the fields of the RunningProcess table:</p> AppControl Element Field name action name :: component name command action value parameters application name computer hostref"},{"location":"cmdb/#example","title":"Example","text":"<p>AppControl XML map file:</p> <pre><code>&lt;app name=\"inv_test_missing_from_map\" version=\"1.0\"&gt;\n  &lt;component name=\"inv_pricing_001\" description=\"An Invivoo component\" group=\"A group\"\n           hostref=\"inv_host_001\" authref=\"LOCAL\"redirectoutput=\"false\" type=\"file\"&gt;\n    &lt;action value=\"sandbox.sh check inv_pricing_001\" name=\"check\" /&gt;\n    &lt;action value=\"sandbox.sh enable inv_pricing_001\" name=\"enable\" /&gt;\n    &lt;action value=\"sandbox.sh disable inv_pricing_001\" name=\"disable\" /&gt;\n  &lt;/component&gt;\n</code></pre> <p>ServiceNow cmdb_running_process table record (extracts):</p> <pre><code>{\n    \"command\": \"sandbox.sh check inv_pricing_001\",\n    \"computer\": {\n        \"link\": \"https://dev78474.service-now.com/api/now/v1/table/cmdb_ci_computer/8ba1aa202f7320102cd8d49df699b687\",\n        \"value\": \"8ba1aa202f7320102cd8d49df699b687\"\n    },\n    \"name\": \"check::inv_pricing_001\",\n    \"parameters\": \"inv_test_missing_from_map\",\n}\n</code></pre>"},{"location":"cmdb/#populating-your-cmdb","title":"Populating your Cmdb","text":"<p>The cmdb can be populated by inserting individual objects using the cmdb provider's interface. But as the volume of data grows, populating your cmd can become a daunting task. Invivoo is developing tools to automate the creation of cmdb objects from AppControl maps [TO BE CONTINUED].</p>"},{"location":"x4bcli/","title":"X4B Gateway","text":""},{"location":"x4bcli/#latest-available-versions","title":"Latest Available versions","text":"Operating System Format Latest version Microsoft Windows zip Windows Gateway Zip N/A docker docker pull xcomponent/x4b-gateway:latest <p>X4B Gateway is necessary to take advantage of agents deployed on premises.</p> <p>Agents can be deployed anywhere on your I.S. They don't need to have an internet access.</p> <p>Please refer to the agents installation section for agents installation.</p> <p></p> <p>Thanks to X4B Gateway, you can deploy your applications in the AppControl Cloud Platform with Agents deployed on premises.</p>"},{"location":"x4bcli/#how-does-it-work","title":"How does it work ?","text":"<p>The first step, is to go log-in on AppControl.</p> <ol> <li> <p>Navigate to Gateways and click on Register New Gateway </p> </li> <li> <p>Give a name to your gateway and validate.</p> </li> <li> <p>Once your gateway is created, an Access Key and a Secret Access Key are generated.</p> </li> </ol> <p></p> <ol> <li>We are ready to install the X4B Gateway. Please refer to the below documentation for the installation procedure.</li> <li>Because X4B Gateway communicates with agents, you need to install at least one agent.</li> <li>Once your X4B Gateway and your agent are up and running, your are ready to deploy a new application.</li> </ol>"},{"location":"x4bcli/#x4b-gateway-installation","title":"X4B Gateway installation","text":"<p>The first step is to retrieve the X4B Gateway credentials. Navigate to the Gateway page and note the following informations:</p> <ul> <li>Name</li> <li>Access Key</li> <li>Secret Access Key</li> </ul> <p></p>"},{"location":"x4bcli/#microsoft-windows-platform","title":"Microsoft Windows Platform","text":"<p>On Microsoft Windows, the .NET Framework 4.7.2 or above is required .</p> <p>Most of the time it is already installed. Unzip the following file.</p> <p>The fastest method is to execute the following command in a powershell shell with administrative permissions. The following command line will install the gateway and the agent as windows services.</p> <pre><code>irm https://raw.githubusercontent.com/xcomponent/appcontrol-documentation/main/scripts/appcontrolinstall.ps1 | iex\n</code></pre> <p>Note:</p> <pre><code>For the other installation procedures listed above, we recommand to use cmd.exe as a shell to install the gateway and the agent. We don't offer the support for installation through powershell.\n</code></pre> <p>On a prompt (cmd.exe), execute the following command line. Replace MY_ACCESS_KEY, MY_SECRET_ACCESSKEY and MY_GATEWAY_NAME with the suitable values.</p> <pre><code>c:\\x4b&gt; x4b run gateway -a MY_ACCESS_KEY -k MY_SECRET_ACCESSKEY -p MY_GATEWAY_NAME [-l Trace]\n</code></pre> <p>You can also, set the following environment variables:</p> <pre><code>c:\\x4b&gt; set X4B_ACCESS_KEY = MY_ACCESS_KEY\nc:\\x4b&gt; set X4B_SECRET_ACCESS_KEY = MY_SECRET_ACCESSKEY\nc:\\x4b&gt; set X4B_PROXY_NAME = MY_GATEWAY_NAME\n</code></pre> <p>If the configuration is correct, you should observe the following lines in the terminal:</p> <pre><code>  __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2021\n25/02/2021 09:15:20# X4B Gateway is up and running... (Press Ctrl+C to exit)\n25/02/2021 09:15:21# Waiting for websocket connection\n25/02/2021 09:15:39# HeartBeat successfully published\n25/02/2021 09:15:39# Websocket connection established\n\n</code></pre>"},{"location":"x4bcli/#run-the-gateway-as-a-microsoft-windows-service","title":"Run the gateway as a Microsoft Windows service","text":"<p>In a prompt with administrative permissions:</p> <pre><code>c:\\x4b&gt; x4b install -servicename x4bGatewayServiceName  -server \"https://appcontrol.xcomponent.com/core\" -loglevel \"Trace\" -access \"myAccesToken\" -proxyname \"myGatewayName\" -secret \"mySecretToken\"\n</code></pre> <p>The first parameters to register the gateway as a service is the topshelf syntax: </p> <p>Topshelf Command-Line Reference \u2014 Topshelf 3.0 documentation</p> <p>The following parameters are specific to the gateway:</p> <p>-server \"https://appcontrol.xcomponent.com/core\" -loglevel \"Trace\" -access \"myAccesToken\" -proxyname \"myGatewayName\" -secret \"mySecretToken\"</p>"},{"location":"x4bcli/#deployment-using-docker","title":"Deployment using Docker","text":"<p>The docker image is available on docker hub: x4b-gateway</p> <pre><code>docker run -e X4B_ACCESS_KEY=MY_ACCESS_KEY -e X4B_SECRET_ACCESS_KEY=MY_SECRET_ACCESSKEY -e X4B_PROXY_NAME=MY_GATEWAY_NAME xcomponent/x4b-gateway:latest\n</code></pre> <p>If the configuration is correct, you should observe the following lines in the terminal:</p> <pre><code>  __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2021\n25/02/2021 09:15:20# X4B Proxy is up and running... (Press Ctrl+C to exit)\n25/02/2021 09:15:21# Waiting for websocket connection\n25/02/2021 09:15:39# HeartBeat successfully published\n25/02/2021 09:15:39# Websocket connection established\n\n</code></pre>"},{"location":"x4bcli/#display-environment-variables","title":"Display environment variables","text":"<pre><code>c:\\x4b&gt;x4b env\n</code></pre>"},{"location":"x4bcli/#install-and-run-the-gateway-with-docker-and-builtin-command-of-the-gateway","title":"Install and run the gateway with docker and builtin command of the gateway","text":"<pre><code>c:\\x4b&gt;x4b run docker -a|--accesskey &lt;accesskey&gt; -k|--secretaccesskey &lt;secretaccesskey&gt; -p|--gatewayname &lt;gatewayname&gt; [-l|--loglevel &lt;loglevel&gt;] [-i|--imagetag &lt;imagetag&gt;] [-u|--urlserver &lt;urlserver&gt;]\n</code></pre>"},{"location":"x4bcli/#remove-appcontrol-gateway-service-from-the-workstation","title":"Remove Appcontrol Gateway service from the workstation","text":"<pre><code>c:\\x4b&gt;x4b uninstall -servicename x4bGatewayServiceName\n</code></pre>"},{"location":"x4bcli/#remove-appcontrol-gateway-container-running-with-docker","title":"Remove Appcontrol Gateway container running with Docker","text":"<pre><code>c:\\x4b&gt;x4b uninstall docker -c|--containername MY_GATEWAY_NAME\n</code></pre>"},{"location":"x4bcli/#display-help","title":"Display Help","text":"<p>x4b -v|--version x4b [command] -h x4b subcommand [command] -h|--help</p> <pre><code>c:\\x4b&gt;x4b -h // display list of commands available\nc:\\x4b&gt;x4b run -h // display help for command run \nc:\\x4b&gt;x4b run docker -h //display help for the subcommand\nc:\\x4b&gt;x4b run gateway -h // display help for the subcommand  \nc:\\x4b&gt;x4b uninstall docker -h // display help for this specific command\n</code></pre>"},{"location":"x4bcli/#check-appcontrols-agents-communication","title":"Check Appcontrol's Agents communication","text":"<p> The gateway can also be usefull to check is the agent is up and running. Agents can be deployed on the same computer as the gateway or elsewhere in the network.</p> <p>Imagine, you have deployed an agent in the host 'myhost' and the gateway is deployed elsewhere in the network. Open 'cmd.exe' and enter the following command:</p> <pre><code>c:\\x4b&gt;x4b run interactive --host myhost\n</code></pre> <p>This is the list of allowed parameters:</p> Parameters Description Example --host Agent host name x4b run interactive --host MYHOST --port Agent port value x4b run interactive --host MYHOST --port 12345 --ssl Ssl protocol: Tls, Tls12, Tls13 x4b run interactive --host MYHOST --port 12345 --ssl Tls12 --loglevel Log Level: Error, Info, Trace x4b run interactive --host MYHOST --port 12345 --ssl Tls12 --loglevel Error <p>If the gateway can't reach the agent, you will obtain the following output:</p> <pre><code>c:\\x4b&gt;x4b run interactive --host myhost\nLaunching gateway in interactive mode...\n __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2023\n\n12/09/2023 17:08:52# X4B Gateway is up and running... (Press Ctrl+C to exit)\n\n12/09/2023 17:08:55# Connection to agent fails - Retrying in few seconds...\n</code></pre> <p>If the gateway is able to reach the agent, you will obtain the following output:</p> <pre><code>C:\\&gt;x4b run interactive --host localhost\nLaunching gateway in interactive mode...\n __  ______ ___  __  __ ____   ___  _   _ _____ _   _ _____\n \\ \\/ / ___/ _ \\|  \\/  |  _ \\ / _ \\| \\ | | ____| \\ | |_   _|\n  \\  / |  | | | | |\\/| | |_) | | | |  \\| |  _| |  \\| | | |\n  /  \\ |__| |_| | |  | |  __/| |_| | |\\  | |___| |\\  | | |\n /_/\\_\\____\\___/|_|  |_|_|    \\___/|_| \\_|_____|_| \\_| |_|\n\n\nXComponent For Business by Invivoo Software - 2023\n\n12/09/2023 17:11:53# X4B Gateway is up and running... (Press Ctrl+C to exit)\n\n12/09/2023 17:11:54# Connection to agent established\n\n12/09/2023 17:11:54#\n***************************************\nAgent configuration:\nVersion=26.0\nPlatform=Windows\nCpu Usage=15%\nnetworkAddress=0.0.0.0\nport=12567\nlogdirectory=C:\\tools\\appcontrol\\xcAgent-binary\\./logs\ntempdirectory=C:\\Windows\\TEMP\nmaxlogsizeinmo=5\nnbdaystodeletelogs=10\nredirecterroutput=1\nexecutionthreshold=200\nloglevel=TRACE\ntrustedservers=\nsslprotocol=tls12\nsshkeydirectory\nshell=\nignoretrustedservers=false\nserviceaccount=\nwindows Interpreter=C:\\Windows\\system32\\cmd.exe\n\n***************************************\n\nappControlAgent@localhost %\n</code></pre> <p>The gateway is able to reach both  linux and windows agents.</p> <p>Once you are connected, you can execute commands on agents's host. For example, 'cd, dir, more' for Windows or 'pwd, ls, cat ' under linux.</p> <p>The commands are executed by the default shell which is 'cmd.exe' for Windows and 'sh or bash' for Linux.</p> <p>Example with Windows's agent:</p> <pre><code>appControlAgent@localhost % dir\n\n R\u00e9pertoire de C:\\tmp\\test\\xcAgent-binary-Win32\n\n12/09/2023  17:31    &lt;DIR&gt;          .\n12/09/2023  17:31    &lt;DIR&gt;          ..\n11/09/2023  14:15               940 config.dat\n11/09/2023  14:31                87 install.bat\n26/03/2018  23:45         2?094?592 libcrypto-1_1.dll\n26/03/2018  23:45           375?808 libssl-1_1.dll\n12/09/2023  17:32    &lt;DIR&gt;          logs\n26/03/2018  23:45           970?912 msvcr120.dll\n11/09/2023  14:29           953?856 xcAgent.exe\n               6 fichier(s)        4?396?195 octets\n               3 R?p(s)  96?394?911?744 octets libres\n\nappControlAgent@localhost C:\\tmp\\test\\xcAgent-binary-Win32% powershell -c cat config.dat\n\n12/09/2023 17:35:25# &lt;!-- XComponent APP Control Agent Configuration file --&gt;\n&lt;config&gt;\n  &lt;item key=\"generatebatch\" value=\"false\" /&gt;\n  &lt;item key=\"windowsinterpreter\" value=\"%ComSpec%\" /&gt;\n  &lt;item key=\"networkAddress\" value=\"0.0.0.0\" /&gt;\n  &lt;item key=\"port\" value=\"12567\" /&gt;\n  &lt;item key=\"logdirectory\" value=\"./logs\" /&gt;\n  &lt;item key=\"tempdirectory\" value=\"%TEMP%\" /&gt;\n  &lt;item key=\"maxlogsizeinmo\" value=\"5\" /&gt;\n  &lt;item key=\"nbdaystodeletelogs\" value=\"10\" /&gt;\n  &lt;item key=\"redirecterroutput\" value=\"true\" /&gt;\n  &lt;item key=\"logToStandardOutput\" value=\"true\" /&gt;\n  &lt;item key=\"executionthreshold\" value=\"200\" /&gt;\n  &lt;item key=\"loglevel\" value=\"TRACE\" /&gt; &lt;!-- NONE, INFO, TRACE, ERROR --&gt;\n  &lt;item key=\"trustedservers\" value=\"\" /&gt;\n  &lt;item key=\"ignoretrustedservers\" value=\"false\" /&gt;\n  &lt;item key=\"sslprotocol\" value=\"tls12\" /&gt; &lt;!-- ssl, tls, tls12, tls13 --&gt;\n  &lt;item key=\"sshkeydirectory\" value=\"\" /&gt;  &lt;!-- Linux Only --&gt;\n  &lt;item key=\"shell\" value=\"\" /&gt;\n&lt;/config&gt;\n\nappControlAgent@localhost C:\\tmp\\test\\xcAgent-binary-Win32%\n</code></pre> <p>Example with debian's agent:</p> <pre><code>appControlAgent@macbook % ls\n\n12/09/2023 17:36:56# config.dat\nconfig_env.dat\nlibs\nlogs\nrun.sh\ntmp\nxcAgent.bin\n\nappControlAgent@macbook /usr/src/app/xcagent% cat config.dat\n\n12/09/2023 17:37:23# &lt;!-- XComponent APP Control Agent Configuration file --&gt;\n&lt;config&gt;\n  &lt;item key=\"networkAddress\" value=\"0.0.0.0\" /&gt;\n  &lt;!--TCP listening port of the agent --&gt;\n  &lt;item key=\"port\" value=\"12567\" /&gt;\n  &lt;item key=\"generatebatch\" value=\"true\" /&gt;\n  &lt;!--Logs and Tmp directories--&gt;\n  &lt;item key=\"logdirectory\" value=\"logs\" /&gt;\n  &lt;item key=\"tempdirectory\" value=\"tmp\" /&gt;\n  &lt;item key=\"maxlogsizeinmo\" value=\"5\" /&gt;\n  &lt;item key=\"nbdaystodeletelogs\" value=\"10\" /&gt;\n   &lt;item key=\"redirecterroutput\" value=\"true\" /&gt;\n  &lt;item key=\"executionthreshold\" value=\"50\" /&gt;\n   &lt;item key=\"logToStandardOutput\" value=\"true\" /&gt;\n  &lt;item key=\"loglevel\" value=\"TRACE\" /&gt; &lt;!-- NONE, INFO, TRACE, ERROR --&gt;\n   &lt;!-- IP address of SSH serveur (unix/linux) --&gt;\n  &lt;item key=\"sshhost\" value=\"127.0.0.1\" /&gt;\n  &lt;!-- IP Address or DNS Names of AC2 servers authorized to communicate with the agent --&gt;\n  &lt;item key=\"trustedservers\" value=\"\" /&gt;\n  &lt;item key=\"sslprotocol\" value=\"tls12\" /&gt;  &lt;!-- ssl, tls, tls12 --&gt;\n  &lt;item key=\"sshkeydirectory\" value=\"\" /&gt;  &lt;!-- Linux Only --&gt;\n  &lt;item key=\"shell\" value=\"\" /&gt;\n&lt;/config&gt;\nappControlAgent@macbook /usr/src/app/xcagent%\n</code></pre>"},{"location":"Getting%20Started/","title":"Get Started","text":"<ul> <li>Go to the XComponent AppControl website.</li> <li>Log in using a social provider</li> <li>That's all, you are logged!</li> </ul> <p>In the example section, copy the following link to the demo application: demo application.</p> <p>On the AppControl website, go to the Import Application and paste the link of the demo application.</p> <p>Follow the wizard (clicking on 'Next' button). In the 'Gateway' tab select 'X4B SaaS'. On the last tab click on 'Import'.</p> <p></p> <p>Go the 'Overview', and select the helloworld application by clicking on the checkbox. Then click on the load button. </p> <p>Click on the 'Architecture' button:</p> <p></p> <p>Using, the command bar, it's easy to start/stop the Hello World application. </p>"},{"location":"Getting%20Started/map/","title":"AppControl Application","text":"<p>In AppControl, applications (also called maps) are described using an XML file. For AppControl, an aplication is a hierarchy of components.</p> <p>This file contains mainly the following informations:</p> <ul> <li>Component elements described by a check command (mandatory), a start command (optional), a stop command (optional), a list of customs commands (optional)</li> <li>List of agents used to execute commands described above</li> <li>Identity elements to run the following components for specific users</li> <li>Scheduling elements to scedule start/stop commands</li> </ul> <p>A minimalist AppControl Hello World ARTEFACT:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n    &lt;hosts&gt;\n       &lt;!-- The way to join the agent --&gt;\n        &lt;host hostid=\"LOCAL\" host=\"127.0.0.1\" port=\"12567\" sslprotocol=\"tls12\" /&gt;\n    &lt;/hosts&gt;\n    &lt;auths&gt;\n        &lt;!-- Identity of the user executing the commands. If empty, commands inherits from agent credentials --&gt;\n        &lt;auth authid=\"LOCAL\" domain=\"\" password=\"\" user=\"\" /&gt;\n    &lt;/auths&gt;\n    &lt;app name=\"hello_world\" version=\"v1\" retry=\"1\"&gt;\n       &lt;!-- A simple component executing an 'echo command' every minute --&gt;\n        &lt;component name=\"test_map\" hostref=\"LOCAL\" authref=\"LOCAL\" redirectoutput=\"true\" checkFrequency=\"60\" type=\"service\"&gt;\n            &lt;action value=\"echo &amp;quot;It's running&amp;quot;\" name=\"check\" /&gt;\n        &lt;/component&gt;\n    &lt;/app&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"Getting%20Started/map/#the-apps-tag","title":"The apps TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n    &lt;hosts&gt;...&lt;/hosts&gt;\n    &lt;auths&gt;...&lt;/auths&gt;\n     &lt;app&gt;\n       &lt;component&gt;\n         ...\n       &lt;/component&gt;\n       ...\n     &lt;/app&gt;\n   &lt;crontable&gt;...&lt;/crontable&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"Getting%20Started/map/#the-hosts-tag","title":"The hosts TAG","text":"<p>The <code>hosts</code> tag groups together a set of <code>host</code> tags describing the way to communicate with the agents.</p> <p>The attributes of a host are:</p> Attribute Description host Required Value: string. Name to resolve or IPv4 address of the machine to be contacted on the network port Required Value: integer. Tcp port number to use join the agent. hostid Required Value: string. Mnemonic name to designate the host agent and which will then be used as the value of the hostref attribute in a component tag. sslprotocol Optional Default value is set to tls12. Possible values: ssl, tls, tls12. Note: on most Operating Systems ssl and tls are obsolete"},{"location":"Getting%20Started/map/#the-auths-tag","title":"The auths TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;auths&gt;\n     &lt;auth authid=\"LOCAL\" domain=\"\" password=\"\" user=\"\" /&gt;\n   &lt;/auths&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> <p>The <code>auths</code> tag groups together a set of <code>auth</code> tags describing the identities used to perform actions of application components. These identities will be used by agents.</p> Attribute Description authid Required Mnemonic name to designate the identity that will be used as the value of the authref attribute in a component tag user Required . Can be empty. Username/Identity. If the value is empty, the username will be the one running the agent password Required Can be empty Value: string. Clear password of the user to identify. If the value is empty, as well as the username, the identity used will be the one running the agent. domain Optional Microsoft Windows only, Windows domain name for authentication"},{"location":"Getting%20Started/map/#the-app-tag","title":"The app TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n       &lt;!-- ... --&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> Attribute Description name Required Mnemonic name to designate an application version Required . Mnemonic name of the application version. Perhaps in a numbered form \"1.3.6\", named \"current\" or mixed \"1.3.6-Stable\" cronref Optional Reference to a \"crontable\" retry Optional Value: integer. The value of the default number of retries to perform component actions on the application"},{"location":"Getting%20Started/map/#the-component-tag","title":"The component TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;action name=\"check\" value=\"dir componentFile.txt\" /&gt;\n            &lt;action name=\"enable\" value=\"echo start &gt; componentFile.txt\" /&gt;\n            &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"Getting%20Started/map/#component-properties","title":"Component properties","text":"Attribute Description name Required Name of the component (should be unique in the application group Optional Name of the group. Used to group a set of components in the UI hostref Value : string. Reference to the agent (see hosts tag). Mandatory if not set on the action authref Value : string. Reference to the agent identity (see auths tag). Mandatory if not set on the action type Optional Used to display an icon on the map. An url to an image (png, jpeg or svg) can be set. Anyway you can use one of the following value: browser, cd, chip, data-information, devises, dollar, euro, file, green-thermometer, hdd, memflash, memory, middleware, network, orange-thermometer, pounds, process, service, tools, user, yen description Optional Value: string Label of the component in addition to the name redirectoutput Optional Value: True. If true, standard output will be parsed to find dynamic messages or dynamic components checkFrequency Optional Value: integer. Component check cycle frequency (in seconds). Default value is set at server configuration level retryNumber Optional Value: integer. Maximum number of attempts displayname Optional Value: string. Display name of an application component replacing \"name\" in the UI"},{"location":"Getting%20Started/map/#the-father-tag","title":"The father TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;father&gt;Attribut NAME du COMPOSANT PERE #1&lt;/father&gt;\n            &lt;father&gt;Attribut NAME du COMPOSANT PERE #2&lt;/father&gt;\n            &lt;action name=\"check\" value=\"dir componentFile.txt\" /&gt;\n            &lt;action name=\"enable\" value=\"echo start &gt; componentFile.txt\" /&gt;\n            &lt;action name=\"check\" value=\"del /Q componentFile.txt\" /&gt;\n            &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> <p>The <code>father</code> tag creates a dependency on a component. The AppControl approach is based on the fact that child components have the knowledge of father(s). Multiple fathers for a component are allowed. Be careful not to create a loop which is not allowed and generates an error during loading.</p>"},{"location":"Getting%20Started/map/#the-action-tag","title":"The action TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;!-- ... --&gt;\n            &lt;action name=\"check\" value=\"dir componentFile.txt\" /&gt;\n            &lt;action name=\"enable\" value=\"echo start &gt; componentFile.txt\" /&gt;\n            &lt;action name=\"check\" value=\"del /Q componentFile.txt\" /&gt;\n            &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> <p>The <code>action</code> tag is used to describe 4 kinds of actions:</p> <ul> <li>check : Periodic verification of the state of the component at a frequency in seconds. Only one by component</li> <li>enable : Starts a component From 0 to 1 by component</li> <li>disable : Stops a component From 0 to 1 by component</li> <li>custom : On demand commands From 0 to n by component</li> </ul> Attribute Description name Required Value : check value Required Command line to execute retryTime Optional Value: integer. Time in seconds before retrying communication with the agent commandname Required Display name / Identifier of the command visibility Optional Control the visibility of this custion action outside AppControl (in XC Scenario). If the value is Public, the AppControl worker will publish this action as a Scenario task. Default is Private, do not publish the action. parameters Optional Used to display an icon on the map. An url to an image (png, jpeg or svg) can be set. Anyway you can use one of the following value: browser, cd, chip, data-information, devises, dollar, euro, file, green-thermometer, hdd, memflash, memory, middleware, network, orange-thermometer, pounds, process, service, tools, user, yen hostref Optional Value : string. Reference to the agent (see hosts tag). Mandatory if not set on the component authref Optional Value : string. Reference to the agent identity (see auths tag). Mandatory if not set on the component"},{"location":"Getting%20Started/map/#the-parameters-tag","title":"The parameters TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n   &lt;!-- ... --&gt;\n   &lt;app name=\"TrainingMap\" version=\"current\" cronref=\"MCO\"&gt;\n        &lt;component name=\"File exist\" group=\"TEST\" hostref=\"LOCAL\" authref=\"LOCAL\"&gt;\n            &lt;!-- ... --&gt;\n             &lt;action name=\"custom\" visibility=\"Public\" commandname=\"File search\" value=\"dir $(file)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"file\"\n                        description=\"Filename to list\"\n                        value=\"\"\n                        canedit=\"true\"\n                        validation=\"\\S+\"\n                    /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n   &lt;/app&gt;\n   &lt;!-- ... --&gt;\n&lt;/apps&gt;\n</code></pre> <p>The <code>parameters</code> tag is used to describe parameters of custom actions. The parameters will be avaible in the UI.  The syntax of variables in AppControl is: $ (variableName) In the tag, \"parameters\", several <code>parameter</code> tags will have the following attributes:</p> Attribute Description name Required Name of the variable description Optional Description of the variable. This description is displayed in the UI value Required Default value of the variable canedit Optional Values: True (Default) or False. If False it will not be possible to edit the value in the UI validation Optional Value: regex. This regex is applied to the value."},{"location":"Getting%20Started/map/#the-crontable-tag","title":"The crontable TAG","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;\n&lt;apps&gt;\n    &lt;crontable&gt;\n        &lt;cronrules cronid=\"scheduling\"&gt;\n        &lt;trigger name=\"CRON#1\" action=\"stop\" force=\"true\" components=\"A1\" propagate=\"false\" expression=\"0 00 * * * ? *\" /&gt;\n            &lt;trigger name=\"CRON#2\" action=\"start\" force=\"true\" components=\"A1\" propagate=\"true\" expression=\"0 15 * * * ? *\" /&gt;\n            &lt;trigger name=\"customDir\" action=\"custom\" components=\"A1\" customactionname=\"dirAction\" customactionparameters=\"option=c;directory=c:\\temp\"   expression=\"0 0/5 * 1/1 * ? *\" /&gt;\n            &lt;trigger name=\"CRON#3\" action=\"stop\" expression=\"0 0/5 * 1/1 * ? *\" /&gt;\n            &lt;trigger name=\"CRON#3\" action=\"start\" expression=\"0 0/2 * 1/1 * ? *\" /&gt;\n        &lt;/cronrules&gt;\n    &lt;/crontable&gt;\n\n    &lt;app name=\"CronDemo\" version=\"v1\" cronref=\"scheduling\"&gt;\n    &lt;component name=\"A1\" description=\"A1 component\" hostref=\"LOCAL\" authref=\"LOCAL\" &gt;\n            &lt;action value=\"echo demo\" name=\"check\" /&gt;\n            &lt;action value=\"start.sh\" name=\"enable\"  /&gt;\n            &lt;action value=\"stop.sh\" name=\"disable\" /&gt;\n            &lt;action name=\"custom\" commandname=\"Perl version\" value=\"C:\\Strawberry\\perl\\bin\\perl.exe  -$(version)\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"version\" value=\"V\" canedit=\"false\" validation=\"*\" /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n            &lt;action value=\"dir -$(option)  $(directory)\" visibility=\"public\" commandname=\"dirAction\" name=\"custom\"&gt;\n                &lt;parameters&gt;\n                    &lt;parameter name=\"option\" value=\"c\" canedit=\"false\" validation=\"*\" /&gt;\n                    &lt;parameter name=\"directory\" value=\"c:\\sources\\*\" canedit=\"true\" validation=\"*\" /&gt;\n                &lt;/parameters&gt;\n            &lt;/action&gt;\n        &lt;/component&gt;\n    &lt;/app&gt;\n&lt;/apps&gt;\n</code></pre> <p>You can refer to the Quartz Scheduler link to have the complete documentation of allowed cron expressions.</p> <p>As you can observe in the example above, you can be multiple cron expressions in the same file. You can schedule start/stop or customs actions.</p>"},{"location":"Getting%20Started/appcontrol_worker/","title":"Contents","text":"<p>This document describes how to use AppControl to execute a script or program as a task in XC Scenario. It shows how to define the script invocation in an AppControl map, how to test it directly from AppControl, and finally how to use it from Scenario.</p>"},{"location":"Getting%20Started/appcontrol_worker/#benefits-of-using-appcontrol","title":"Benefits of using AppControl","text":"<p>There are many advantages to running scripts through AppControl, as opposed to running them directly from a worker task:</p> <ul> <li> <p>the use of an AppControl agent for execution makes it easy to run scripts on   remote machines, without requiring the script author to manage remote   connections and logins himself</p> </li> <li> <p>executions through AppControl will benefit from monitoring and supervision by   the production support team</p> </li> <li> <p>defining script calls in an AppControl map allows for better tracking and   management of the script code base</p> </li> </ul>"},{"location":"Getting%20Started/appcontrol_worker/#pre-requisites","title":"Pre-requisites","text":"<p>This document assumes that you have access to a working X4B installation, either Invivoo's SaaS platform, or an X4B platform deployed on your premises.</p> <p>This includes XC Scenario, XC AppControl, and an AppControl worker (detailed below) deployed and configured to interact with this AppControl instance. Contact the administrator of your X4B platform to make sure that all the required components are available and properly configured.</p>"},{"location":"Getting%20Started/appcontrol_worker/#appcontrol-worker","title":"AppControl Worker","text":"<p>The AppControl worker is a standalone program that acts as a worker program for Scenario:</p> <ul> <li>it publishes a catalog of tasks</li> <li>it polls the task queue for tasks to execute</li> <li>it runs tasks and posts task statuses</li> </ul> <p>Unlike other worker programs that implement their own tasks, the AppControl worker:</p> <ul> <li>gets its list of tasks from custom actions in AppControl maps</li> <li>runs tasks by calling custom actions that get executed by an AppControl agent</li> </ul> <p>The AppControl worker must be configured to communicate with an AppControl server through a gateway, which is defined inside AppControl, and is associated with a specific AppControl user.</p>"},{"location":"Getting%20Started/appcontrol_worker/#defining-scripts-for-the-appcontrol-worker","title":"Defining scripts for the AppControl worker","text":"<p>Scripts that are meant to be used with the AppControl worker need to be defined inside an AppControl map, as custom actions attached to some AppControl component.</p>"},{"location":"Getting%20Started/appcontrol_worker/#custom-actions","title":"Custom actions","text":"<p>A custom action is defined by an <code>action</code> element (inside a <code>component</code> element) with a <code>name=\"custom\"</code> attribute. Other important attributes are <code>commandname</code>, which lets you identify each custom action, and <code>value</code>, which holds the actual command to execute.</p> <p>The contents of the <code>value</code> attribute are sent to the AppControl agent for execution, so the platform where the agent is running determines the actual shell script language to use, Windows command/batch script or linux/unix-like shell script.</p> <p>The <code>action</code> element can have <code>parameters</code> and <code>outputParameters</code> sub-elements, for input and output parameters, respectively.</p> <p>The <code>action</code> element also has a <code>visibility</code> attribute, which controls whether the action is accessible from outside AppControl or not. The AppControl worker only retrieves public tasks, so if a custiom action is to be used with Scenario, it is mandatory to specify <code>visibility=\"public\"</code>.</p> <p>See the AppControl map documentation for more details.</p>"},{"location":"Getting%20Started/appcontrol_worker/#example","title":"Example","text":"<p>The following XML snippet is an excerpt from an AppControl map that defines a component named <code>\"comp\"</code> (you can find the map file here). This component has a <code>check</code> action (mandatory) and two custom actions named <code>calc</code> and <code>prod_div</code>.</p> <pre><code>&lt;component name=\"comp\" description=\"Script execution component\" hostref=\"LOCAL\" authref=\"LOCAL\" redirectoutput=\"false\" type=\"file\"&gt;\n    &lt;action value=\"echo 1\" name=\"check\" /&gt;\n\n    &lt;action value=\"C:\\a\\bin\\calc_script.cmd $(arg)\" commandname=\"calc\" name=\"custom\" visibility=\"public\"&gt;\n        &lt;parameters&gt;\n            &lt;parameter name=\"arg\" value=\"\" canedit=\"true\" validation=\"*\" /&gt;\n        &lt;/parameters&gt;\n    &lt;/action&gt;\n\n    &lt;action value=\"py c:\\a\\bin\\pycalc.py $(operand1) $(operand2)\" commandname=\"prod_div\" name=\"custom\" visibility=\"public\"&gt;\n        &lt;parameters&gt;\n            &lt;parameter name=\"operand1\" canedit=\"true\" validation=\"\\d+\" /&gt;\n            &lt;parameter name=\"operand2\" canedit=\"true\" validation=\"\\d+\" /&gt;\n        &lt;/parameters&gt;\n        &lt;outputParameters&gt;\n            &lt;parameter name=\"product\" /&gt;\n            &lt;parameter name=\"division\" /&gt;\n        &lt;/outputParameters&gt;\n    &lt;/action&gt;\n\n&lt;/component&gt;\n</code></pre> <p>The <code>calc</code> action has a single input parameter named <code>arg</code>, defined in the <code>parameters/parameter</code> element, and referenced with the <code>$(arg)</code> inside the <code>value</code> attribute. This action will run the Windows command line file found at <code>C:\\a\\bin\\calc_script.cmd</code> on the agent's machine, passing it the value of the <code>arg</code> parameter (script file here).</p> <p>The <code>prod_div</code> action has both input and output parameters. It runs a python script with two input parameters, calculating the product and division of these two operands, and returning those two values. The <code>outputParameters</code> element is used to list the names of the return values, so they can be added to the task's description in the Scenario task catalog, and also identified in the script's output stream (see A script with output parameters below).</p>"},{"location":"Getting%20Started/appcontrol_worker/#running-custom-actions-in-appcontrol","title":"Running custom actions in AppControl","text":"<p>Once the custom actions have been defined in the map file, as above, the map must be imported into AppControl, using the New button in the UI. Please refer to the AppControl documentation if you need more information on how to use the AppControl UI.</p> <p>When the <code>Architecture</code> tab is chosen to display the map's graph, the components from the map are shown, and any custom actions defined on them will be found on a dropdown menu accessible through a right-click:</p> <p></p>"},{"location":"Getting%20Started/appcontrol_worker/#a-simple-script","title":"A simple script","text":"<p>If we pick the <code>calc</code> action, a dialog box (on the left) shows the command line that will be executed, as well as the arguments that are expected (in this case, the single parameter <code>arg</code>). Enter a value for the argument, and press the Execute Custom Action button. The dialog box (on the right) now displays the status of the execution, which can be InProgess, while it's running, and then Execution Succeeded as shown here when it's finished, with the exit code from the script on the right-hand side.</p> <p></p> <p>As scripts usually produce output from their execution by printing to their standard output stream, the AppControl custom action captures that output stream and displays it on the screen, below the green status line. In this case, it's the message <code>calc_script: arg=hello</code> that was printed by the script.</p>"},{"location":"Getting%20Started/appcontrol_worker/#a-script-with-output-parameters","title":"A script with output parameters","text":"<p>A shell script does not have a notion of output parameters. But in many situations, people write code that produces results, and we want to retrieve those results, either for displaying in the AppControl UI, or for communicating them to Scenario so they can be used by other tasks. </p> <p>This second example, the <code>prod_div</code> action, illustrates this use case with a python script that returns two output parameters, and it explains the particular syntax that's used, in the script's standard output stream, to represent return values so Scenario get use them.</p> <p>The <code>pycalc</code> script (source code here) calls a python function that calculates the product and division of its two operands. If we pick the <code>prod_div</code> action in AppControl, the dialog box will shows us the command line and input arguments (<code>operand1</code>, <code>operand2</code>), and after executing the action, we'll also see the standard output, as before.</p> <p></p> <p>However, in this case, we see that the standard output has a very specific format:</p> <pre><code>&lt;appcontrol&gt;\n    {\n        'Message': 'pycalc: success.',\n        'OutputValues': {\n            'product': 72,\n            'division': 8.0,\n         }\n    }\n&lt;/appcontrol&gt;\n</code></pre> <p>Inside the &lt;appcontrol&gt; tags is an object with json/javascript syntax, that is meant to be interpreted by the AppControl worker:</p> <ul> <li> <p>the <code>Message</code> property holds some text that will be displayed in the Scenario   UI, so it should be some kind of summary or resulting status from the   script's execution.</p> </li> <li> <p>the <code>OutputValues</code> property is a dictionary of the output parameters. It must   match the set of parameters listed in the <code>outputParameters</code> element of the   AppControl map (see Custom action example above), and the values   must be filled in by the script.</p> </li> </ul>"},{"location":"Getting%20Started/appcontrol_worker/#running-scriptscustom-actions-in-scenario","title":"Running scripts/custom actions in Scenario","text":"<p>So far, we've seen how to define our scripts in the AppControl map, and how to run them from the AppControl UI. This section deals with using those scripts inside Scenario.</p> <p>If everything has been set up correctly by your administrator, as described in Pre-requisites above, importing and loading (activating) the map that defines your scripts is enough to make them available in Scenario. The AppControl worker publishes all the custom actions from your map as Scenario tasks, in a namespace called AppControl.</p>"},{"location":"Getting%20Started/appcontrol_worker/#using-the-script-as-a-scenario-task","title":"Using the script as a Scenario task","text":"<p>In the Scenario designer, when creating or modifying a scenario definition, drag and drop an automatic task object (the one with the gears icon, called Task), and select the AppControl namespace in the Task Parameters panel. In the list of tasks, you can see two tasks from the <code>map,v1.xml</code> file, with names:</p> <ul> <li>map,v1@admin__comp_calc</li> <li>map,v1@admin__comp_prod_div</li> </ul> <p>The structure of these names reflects the AppControl artifacts: &lt;map&gt;@&lt;user&gt;__&lt;component&gt;_&lt;action&gt;. These actions are now available, like any other task, to be used in your scenario.</p> <p></p> <p>Select the <code>prod_div</code> task, enter values for operands 1 and 2, and then run the scenario. In the cockpit, you can see the output values and the message, just as we saw in the AppControl UI above:</p> <p></p>"},{"location":"Getting%20Started/appcontrol_worker/dynamicmapinformations/","title":"Dynamic informations","text":"<p>An application, is a set of components defined statically with an xml format (cf: Create an application). Nevertheless, the application can be enriched with dynamic informations. Dynamic informations are returned by the 'check' command.</p> <p>To return dynamic informations the 'check' command should log on the standard output some informations. The informations should respect the following format:</p> <pre><code>&lt;appcontrol&gt; APPCONTROL JSON OBJECT &lt;/appcontrol&gt;\n</code></pre> <p>Dynamic informations can enrich the content of the component owning the 'check'. In dynamic informations start/stop commands are not allowed.</p> <p>The JSON format is the following:</p> <pre><code>{\n    \"link\": \"Hyperlink to wathever you want\", //Optional\n    \"name\": \"Name of the component\",          //Required\n    \"displayName\": \"Display name\",            //Optional\n    \"state\": \"  Initializing | \n                InError |\n                Start |\n                Starting |\n                Started |\n                Stop |\n                Stopping |\n                Stopped \",     //Optional\n    \"parents\":                 //Optional but highly recommanded\n    [\n        \"Parent1\",\n        \"Parent2\",\n    ],\n    \"exitCode\": 256, //Optional\n    \"color\": \"Color of the code RGB format or hexa code ('255,255,255' or #FFFFFF\", //Optional\n    \"Type\": \" Used to display an icon on the map. An url to an image (png, jpeg or svg) can be set. Anyway you can use one of the following value: browser, cd, chip, data-information, devises, dollar, euro, file, green-thermometer, hdd, memflash, memory, middleware, network, orange-thermometer, pounds, process, service, tools, user, yen\",  //Optional\n    \"groupName\": \"Name of the group\",  //Optional\n    \"customActions\": //Optional\n        [\n            {\n            \"visibility\": \"Private\",\n            \"customActionName\": \"echo Action\",\n            \"customActionDescription\":  null,\n            \"customActionCommandLine\": \"echo $(message)\",\n            \"parallelCustomAction\": false,\n            \"parameters\":\n            [\n                {\n                    \"parameterName\":\"message\",\n                    \"description\": \"\",\n                    \"defaultValue\": \"Welcome message\",\n                    \"validationRule\": \"*\",\n                    \"isEditable\": true\n                }\n            ]\n            }\n        ],\n    \"filters\": {\"filter name 1\": [\"filter values\"] ,\n                \"filter name 2\": [\"filter values\"]\n                }  //Optional,\n    \"dynamicTree\" : [\n            {\n                //A json object with the properties defined above\n            }\n    ] //Optional,\n}\n</code></pre> <p>A full example is available in this documentation: - Application Xml - JSON dynamic data</p> <p>The application should be tested this way. </p> <ol> <li>First copy this the link to the application: Application</li> <li>Go to the New Application menu and import the previous application    </li> <li>Once the application is loaded go to the Architecture menu, you should obtain the following rendering:    </li> </ol> <p>On the above screenshot, you can observe that dynamic components are displayed with an 'octagon form' whereas the 'static component' is displayed with a 'square form'.</p>"},{"location":"Install%20standalone/standalone/","title":"Running AppControl Locally with Docker Compose","text":"<p>This package lets you install and run Invivoo's X4B AppControl software locally on a Windows PC. To install X4B AppControl in standalone under Windows OS, unzip the following file into an installation directory, and move into that directory.</p>"},{"location":"Install%20standalone/standalone/#what-is-appcontrol","title":"What is AppControl?","text":"<p>Invivoo's X4B Platform lets companies integrate all their business processes, activities, and systems in a global, data-driven model, providing multi-team collaboration, profile-based user dashboards, with the possibility to trigger actions directly, turning raw data into actionable insights. This helps eliminate wasted time and energy, allowing organizations to achieve operational efficiency, and succeed in their digital transformation.</p> <p>AppControl is a central component of the X4B Platform. It supports the intelligent management and monitoring of your applications and systems, through a visual dashboard where the dependencies between the various components of your applications are represented as a graph, and used to start and stop applications and services in the correct order.</p> <p>AppControl comes with a standard set of actions to manage application components, and you can add your own custom actions to query specific information or trigger specific processing on the application.</p>"},{"location":"Install%20standalone/standalone/#appcontrol-license-and-usage-terms","title":"AppControl License and Usage Terms","text":"<p>AppControl is free to use for educational purposes. For production use, please contact Invivoo.</p>"},{"location":"Install%20standalone/standalone/#installing-appcontrol-locally","title":"Installing AppControl Locally","text":"<p>The AppControl software is delivered as a set of container images, meant to be run inside a container orchestrator such as Kubernetes or Red Hat's OpenShift. Invivoo provides Helm charts for this installation, which is the recommended deployment method for production environments.</p> <p>For a newcomer discovering AppControl for the first time, Invivoo is providing this deployment method, using Docker Compose, to make it easy to quickly set up an AppControl instance locally, on your laptop, and immediately start exploring its possibilities.</p> <p>AppControl includes a gateway and agents that will let you manage any system, local or remote, from this local instance. Conversely, remote workstations will also be able to access and use this instance, meaning the AppControl web-based UI will be accessible from every machine on your network.</p> <p>Note that this setup is NOT recommended for production deployments.</p>"},{"location":"Install%20standalone/standalone/#requirements","title":"Requirements","text":"<p>You will need Docker Desktop on your PC. Invivoo recommends choosing WSL 2 over Hyper-V for the Linux virtualization (see installation instructions below).</p> <p>You will need at least 16 Gb of RAM and 5 Gb of available disk space.</p>"},{"location":"Install%20standalone/standalone/#installation-instructions","title":"Installation Instructions","text":""},{"location":"Install%20standalone/standalone/#docker-desktop","title":"Docker Desktop","text":"<p>To install the latest version of Docker Desktop, follow the instructions on their web site.</p> <p>In the System Requirements section, choose WSL 2 backend, and follow the instructions from Microsoft to enable the feature and install WSL.</p>"},{"location":"Install%20standalone/standalone/#appcontrol-with-docker-compose","title":"AppControl with Docker Compose","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. Invivoo provides the <code>appcontrol.yml</code> file to configure AppControl's services. This lets you create and start all the services with a single command.</p> <p>Make sure that Docker Desktop is started. Open a command line tool (a normal one, administrator rights are not required), and run the following command:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml up -d\n</code></pre> <p>The command will start by retrieving all the required container images from Invivoo's DockerHub repository, this may take a few minutes. After that, the containers are started with the <code>docker run</code> command. Subsequent runs will reuse the locally-stored images.</p> <p>When the command has finished executing, you should see an output like the following:</p> <pre><code> - Network appcontrol-compose_default                  Created                            0.8s\n - Container appcontrol-compose-rabbit-1               Started                            8.4s\n - Container appcontrol-compose-gateway-1              Started                            8.5s\n - Container appcontrol-compose-agentdebian-1          Started                            8.9s\n - Container appcontrol-compose-login-1                Started                            8.9s\n - Container appcontrol-compose-sql-1                  Started                            9.0s\n - Container appcontrol-compose-redis-1                Started                            8.3s\n - Container appcontrol-compose-webapp-1               Started                            8.8s\n - Container appcontrol-compose-notification-1         Started                           12.6s\n - Container appcontrol-compose-api-1                  Started                           15.8s\n - Container appcontrol-compose-configvalidator-1      Started                           12.2s\n - Container appcontrol-compose-agentmanager-bridge-1  Started                           15.3s\n - Container appcontrol-compose-dbaccess-1             Started                           13.7s\n - Container appcontrol-compose-scheduler-1            Started                           14.5s\n - Container appcontrol-compose-launcher-1             Started                           14.8s\n - Container appcontrol-compose-launcher-dispatcher-1  Started                           10.3s\n - Container appcontrol-compose-statistics-1           Started                           14.4s\n - Container appcontrol-compose-agentmanager-1         Started                           15.2s\n - Container appcontrol-compose-agentstatus-1          Started                           15.3s\n - Container appcontrol-compose-apps-1                 Started                           17.3s\n - Container appcontrol-compose-authentication-1       Started                           21.0s\n</code></pre> <p>The AppControl services are up and running.</p>"},{"location":"Install%20standalone/standalone/#using-the-web-interface","title":"Using the Web Interface","text":"<p>In your web browser, navigate to http://localhost:4000 to access the AppControl webapp. Use the following credentials to login:</p> <ul> <li>login: <code>admin</code></li> <li>password: <code>KoordinatorAdmin</code></li> </ul>"},{"location":"Install%20standalone/standalone/#getting-help","title":"Getting Help","text":"<p>Once you're logged into AppControl, you can access the online documentation through the help button (?) on the top right of the screen:</p> <p></p> <p>The dropdown menu also lets you contact Invivoo support through email, and join our Slack channel for access to the development team.</p>"},{"location":"Install%20standalone/standalone/#test-appcontrol-with-the-helloworld-map","title":"Test AppControl with the Helloworld map","text":"<p>The installation package includes a sample AppControl map to help you get started. In the webapp, import the sample map by clicking on the New application button and uploading the file called <code>hellowworld,v1.xml</code>.</p> <p>Here's a tutorial video to help you get started: Helloworld tutorial</p>"},{"location":"Install%20standalone/standalone/#stop-uninstall-appcontrol","title":"Stop / Uninstall AppControl","text":"<p>Run the following command to stop AppControl:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml stop\n</code></pre> <p>If you want to start again, run the following command:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml up -d\n</code></pre> <p>To completely remove AppControl, run the following command:</p> <pre><code>docker-compose -f appcontrol.yml -f appcontrol-images.yml rm\n</code></pre>"},{"location":"azure/agentazure/","title":"In AppControl, how supervise and monitor Azure resources","text":""},{"location":"azure/agentazure/#useful-links","title":"Useful Links\u00a0:","text":""},{"location":"azure/agentazure/#docker-images","title":"Docker Images","text":"<ul> <li>Gateway\u00a0:</li> </ul> <pre><code>docker pull xcomponent/x4b-gateway:latest\n</code></pre>"},{"location":"azure/agentazure/#azure-documentation","title":"Azure Documentation","text":"<ul> <li>Azure CLI documentation</li> <li>Azure CLI Installation</li> </ul>"},{"location":"azure/agentazure/#environment-setup","title":"Environment Setup\u00a0:","text":"<ul> <li>A dedicated resource group if possible.</li> <li>A managed identity within this group. It will be used by the agent when calling \"az login.\"</li> <li>A virtual network and subnet to allow defining a private IP for the agent and possible communication between the gateway and the agent.</li> <li>Deploy an ACI for the gateway with the desired image.</li> <li>Deploy an ACI for the agent with the following image.</li> </ul> <p>Note that both ACIs will be in the same subnet, and the agent's ACI should preferably use the managed identity assigned by the system.</p> <p>Once this environment is created, you can set up a map in AppControl to supervise the Azure resources you're interested in.</p>"},{"location":"azure/agentazure/#installation-procedure","title":"Installation procedure","text":"<p>Setting up this environment requires the installation of the Azure CLI package. Most actions will be performed through it.</p> <ol> <li>Authenticate to Azure\u00a0:</li> </ol> <pre><code>az login\n</code></pre> <ol> <li>Set the subscription where you want to set up this environment:</li> </ol> <pre><code>az account set --subscription [**SUBSCRIPTION-ID**]\n</code></pre> <ol> <li>Create a resource group in your Azure subscription:</li> </ol> <pre><code>az group create --name [**RESOURCE-GROUP-NAME**] --location [**northeurope par exemple**]\n</code></pre> <ol> <li>Create the managed identity for the resource group:</li> </ol> <pre><code>az identity create --resource-group [**RESOURCE-GROUP-NAME**] --name [**IDENTITY-NAME**]\n</code></pre> <ol> <li>Create the virtual network and subnet for the gateway:</li> </ol> <pre><code>az network vnet create --name [**VNET-NAME**] --resource-group [**RESOURCE-GROUP-NAME**] --address-prefix 10.0.0.0/16 --subnet-name [**SUBNET-NAME**] --subnet-prefixes 10.0.0.0/24\n</code></pre> <ol> <li>Add a gateway record on the AppControl platform.</li> </ol> <p></p> <p>Copy the Docker command line on the gateway line created:</p> <p></p> <p>You obtain that\u00a0:</p> <pre><code>docker run  --name [**YOUR-GATEWAY-NAME**] --hostname [**YOUR-GATEWAY-NAME**] -e X4B\\_ACCESS\\_KEY=[**YOUR-GATEWAY-SECRET-KEY**] -e X4B_SECRET_ACCESS_KEY=[**YOUR-GATEWAY-SECRET-KEY**] -e X4B_PROXY_NAME=[**YOUR-GATEWAY-NAME**] -e APPCONTROL_API_URL=https://appcontrol.xcomponent.com/core/ xcomponent/x4b-gateway:latest\n</code></pre> <p>In this command, you'll find the parameters to copy and place into the next command to create your gateway container.</p> <pre><code>az container create --resource-group [**RESOURCE-GROUP-NAME**] --name [**CONTAINER-GATEWAY-NAME**] --image xcomponent/x4b-gateway:latest --restart-policy OnFailure --environment-variables X4B_ACCESS_KEY=[**YOUR-GATEWAY-ACCESS-KEY**] X4B_SECRET_ACCESS_KEY=[**YOUR-GATEWAY-SECRET-KEY**] X4B_PROXY_NAME=[**YOUR-GATEWAY-NAME**] APPCONTROL_API_URL=https://appcontrol.xcomponent.com/core/ --vnet [**VNET-NAME**] --subnet [**SUBNET-NAME**]\n</code></pre> <p>After the container is created and starts automatically, check its operation in Azure by examining the logs.</p> <p></p> <p>And in AppControl to ensure the gateway is accessible.</p> <p></p> <p>You are now ready to create your map in AppControl using this gateway and agent to supervise your Azure infrastructure.</p> <p>Here's an example that supervises an Azure function:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?&gt;\n&lt;apps&gt;\n &lt;hosts&gt;\n  &lt;host hostid=\"agent-azure\" host=\"localhost\" port=\"12567\" sslprotocol=\"Tls12\" /&gt;\n &lt;/hosts&gt;\n &lt;auths&gt;\n  &lt;auth authid=\"LOCAL\" domain=\"\" password=\"\" user=\"\" /&gt;\n &lt;/auths&gt;\n &lt;app name=\"AZURE MAP\" version=\"v1\"&gt;\n  &lt;component name=\"Azure CLI\" description=\"Azure access\" hostref=\"agent-azure\" authref=\"LOCAL\" redirectoutput=\"false\" type=\"file\"&gt;\n   &lt;action value=\"az version\" name=\"check\" /&gt;\n   &lt;action value=\"az $(command)\" commandname=\"Test az cli\" name=\"custom\"&gt;\n    &lt;parameters&gt;\n     &lt;parameter name=\"command\" value=\"account list\" canedit=\"true\" validation=\"\\*\" /&gt;\n    &lt;/parameters&gt;\n   &lt;/action&gt;\n  &lt;/component&gt;\n  &lt;component name=\"AzureFunction\" description=\"Azure Function\" hostref=\"agent-azure\" authref=\"LOCAL\" redirectoutput=\"true\" type=\"browser\"&gt;\n   &lt;father&gt;Azure&lt;/father&gt;\n   &lt;action value=\"az functionapp show --ids /subscriptions/[SUBSCRIPTION-ID]/resourceGroups/[RESOURCE-GROUP-NAME]/providers/Microsoft.Web/sites/[FUNCTION-APP-NAME] --query 'state' | grep -q '&amp;#34;Running&amp;#34;'\" name=\"check\" /&gt;\n   &lt;action value=\"az functionapp start --ids /subscriptions/[SUBSCRIPTION-ID]/resourceGroups/[RESOURCE-GROUP-NAME]/providers/Microsoft.Web/sites/[FUNCTION-APP-NAME]\" name=\"enable\" /&gt;\n   &lt;action value=\"az functionapp stop --ids /subscriptions/[SUBSCRIPTION-ID]/resourceGroups/[RESOURCE-GROUP-NAME]/providers/Microsoft.Web/sites/[FUNCTION-APP-NAME]\" name=\"disable\" /&gt;\n  &lt;/component&gt;\n &lt;/app&gt;\n&lt;/apps&gt;\n</code></pre>"},{"location":"openfaas/synchronous/","title":"Contents","text":"<p>This document describes how to write a simple, synchronous python function that is run inside OpenFaas, and that can be invoked from XC Scenario to implement a scenario task. It details the integration with OpenFaas and the mechanics of making your function available on the server. A separate document will address the case of an asynchronous function.</p> <p>Note that OpenFaas supports writing functions in many programming languages other than python, please have a look at the official OpenFaas documentation for more information.</p> <p>Part of this document is based on the OpenFaas First Python Function tutorial.</p>"},{"location":"openfaas/synchronous/#openfaas-and-cli-installation","title":"OpenFaas and CLI Installation","text":"<p>This document assumes that you have a working OpenFaas installation, and you will need to provide the URL for it. Contact an administrator if you don't have this information. In our example, we'll be using <code>https://openfaas.xcomponent.com</code> as the url for our OpenFaas server, or gateway.</p> <p>As part of the OpenFaas installation, the <code>faas-cli</code> executable should be in your path. This is OpenFaas' command-line interface (CLI), and it is required to perform a number of tasks, including building and deploying your functions, so a set of valid credentials must be configured for it. Again, if needed, contact the administrator responsible for your OpenFaas installation.</p>"},{"location":"openfaas/synchronous/#write-a-simple-function","title":"Write a simple function","text":""},{"location":"openfaas/synchronous/#initialize-the-work-environment","title":"Initialize the work environment","text":"<p>Create a working directory and move into it. Now scaffold a new Python function using the CLI:</p> <pre><code>faas-cli new --lang python3 pyfunc\n</code></pre> <p>This retrieves a set of templates from GitHub, if needed, then creates the following files:</p> <pre><code>pyfunc/handler.py\npyfunc/requirements.txt\npyfunc.yml\n</code></pre> <p>Again, this example uses python, have a look at this page to see what other languages are available.</p> <p>Note that even for a single language, many templates may be available. The default for python is to use the Classic Watchdog, but the above link lists many others.</p>"},{"location":"openfaas/synchronous/#pyfuncyml","title":"pyfunc.yml","text":"<p>This yaml file specifies your functions, and the OpenFaas gateway to use. The <code>faas-cli new</code> command has already filled in most of this file:</p> <pre><code>version: 1.0\nprovider:\n  name: openfaas\n  gateway: http://127.0.0.1:8080\nfunctions:\n  pyfunc:\n    lang: python3\n    handler: ./pyfunc\n    image: pyfunc:latest\n</code></pre> <p>You only need to change or specify the following items:</p> <ul> <li>the gateway, i.e. the url of your OpenFaas installation</li> <li>the docker image name</li> <li>the <code>com.xcomponent.label</code> property (to be added)</li> </ul> <p>OpenFaas supports running functions from Docker images stored on Docker Hub or in private Docker registries. If you decide to use Docker Hub, as we do in this example, you'll need to include a Docker Hub account as the prefix in the image name (<code>joaomdsc</code> in this case, see below).</p> <p>If you want to use a private registry for your images, this document has information on how to specify the access credentials. </p> <p>XC Scenario defines a label (<code>Demo</code> in our example) that is used to filter the functions that will be made available. That label must be referenced here, so that your function can be used in XC Scenario. We'll use the <code>labels.com.xcomponent.label</code> property to specify a value, which has to match whatever value was configured in your installation of XC Scenario. Please contact your X4B/Scenario administrator to find out the right label to use here.</p> <p>After applying these changes, here's what the modified <code>pyfunc.yml</code> file looks like:</p> <pre><code>version: 1.0\nprovider:\n  name: openfaas\n  gateway: https://openfaas.xcomponent.com\nfunctions:\n  pyfunc:\n    lang: python3\n    handler: ./pyfunc\n    image: joaomdsc/pyfunc:latest\n    labels:\n      com.xcomponent.label: Demo\n</code></pre>"},{"location":"openfaas/synchronous/#handlerpy","title":"handler.py","text":"<p>The <code>handler.py</code> file is where the function code will be implemented. It starts out with an almost empty function skeleton:</p> <pre><code>def handle(req):\n    \"\"\"handle a request to the function\n    Args:\n        req (str): request body\n    \"\"\"\n\n    return req\n</code></pre> <p>The function has a single parameter <code>req</code> that will contain the body of the HTTP request through which the function was invoked. The default implementation in the provided template simply returns this string unchanged.</p> <p>For the time being, we'll keep the function as it is, while we go through the process of making the function available and running it from XC Scenario. Later on, we'll see how to declare input and output parameters to communicate with a running scenario instance, when the function is used to implement a scenario task.</p>"},{"location":"openfaas/synchronous/#build-the-function","title":"Build the function","text":"<p>Run the following command to build the function:</p> <pre><code>joao@debian1:~$ faas-cli build -f pyfunc.yml\n</code></pre> <p>Note: OpenFaas builds a docker image for the function, so make sure that <code>docker</code> is deployed on the machine.</p> <p>On successful completion, you should see the following message:</p> <pre><code>Successfully tagged joaomdsc/pyfunc:latest\nImage: joaomdsc/pyfunc:latest built.\n</code></pre> <p>You can check the presence of the docker image:</p> <pre><code>docker images\nREPOSITORY                             TAG                     IMAGE ID            CREATED             SIZE\njoaomdsc/pyfunc                        latest                  e7f810f4455f        23 minutes ago      62.1MB\n</code></pre> <p>Now push the image to DockerHub:</p> <pre><code>joao@debian1:~$ docker push joaomdsc/pyfunc:latest\n</code></pre>"},{"location":"openfaas/synchronous/#deploy-the-function-to-the-openfaas-server","title":"Deploy the function to the OpenFaas server","text":"<p>You can now deploy the function to the OpenFaas server, using the following command:</p> <pre><code>joao@debian1:~$ faas-cli deploy -f pyfunc.yml\nDeploying: pyfunc.\n\nDeployed. 202 Accepted.\nURL: https://openfaas.xcomponent.com/function/pyfunc.openfaas-fn\n</code></pre> <p>Check for the presence of a 202 return code. Also note that it might take a minute or two for your function to be available.</p>"},{"location":"openfaas/synchronous/#test-the-function","title":"Test the function","text":"<p>You can invoke the function through <code>curl</code>, passing in a request body with the <code>-d</code> argument:</p> <pre><code>joao@debian1:~$ curl https://openfaas.xcomponent.com/function/pyfunc -d \"Hello!\"\nHello!\njoao@debian1:~$ \n</code></pre> <p>The text that was passed in is returned by the function. </p> <p>You can invoke the function through <code>faas-cli</code>:</p> <pre><code>joao@debian1:~$ echo -n \"Hello!\" | faas-cli -g https://openfaas.xcomponent.com invoke pyfunc\nHello!\njoao@debian1:~$ \n</code></pre> <p>You can also invoke the function through the OpenFaas portal:</p> <p></p> <p>Click on <code>Request body</code>, enter some text (<code>good morning</code> for example), then press <code>Invoke</code>.</p>"},{"location":"openfaas/synchronous/#use-the-function-in-xc-scenario","title":"Use the function in XC Scenario","text":"<p>Create a new scenario, add a task, and pick the OpenFaas namespace. You should find your new function in the list of tasks on the left (if your function does not appear on the list, the label defined in <code>pyfunc.yml</code> may be incorrect, check with your administrator).</p> <p>Select <code>pyfunc</code> in the list. Note the DefaultInput field (on the right image), enter some text value (<code>Hello, OpenFaas world!</code> in this example):</p> <p></p> <p>Now run the scenario, and check the cockpit. You should see the text you entered displayed in the task output:</p> <p></p>"},{"location":"openfaas/synchronous/#write-a-function-with-multiple-parameters","title":"Write a function with multiple parameters","text":"<p>Let's define a second, more realistic function, with input and output parameters. We'll define a function called <code>pyfunc2</code> that takes two inputs, an integer <code>n</code> and a string <code>txt</code>, and returns two outputs, an integer <code>calc</code> and a string <code>msg</code>.</p> <p>Repeat the above steps to create a new function called <code>pyfunc2</code>, and apply the following changes.</p>"},{"location":"openfaas/synchronous/#new-pyfunc2yml","title":"New pyfunc2.yml","text":"<p>In the yaml file, we apply the same changes as before (gateway, image name prefix) but we also add new labels:</p> <pre><code>version: 1.0\nprovider:\n  name: openfaas\n  gateway: https://openfaas.xcomponent.com\nfunctions:\n  pyfunc2:\n    lang: python3\n    handler: ./pyfunc2\n    image: joaomdsc/pyfunc2:latest\n    labels:\n      com.xcomponent.label: Demo\n      com.xcomponent.inputs.n: Number\n      com.xcomponent.inputs.txt: String\n      com.xcomponent.outputs.calc: Number\n      com.xcomponent.outputs.msg: String\n</code></pre> <p>The <code>com.xcomponent.inputs</code> properties define function inputs, and <code>com.xcomponent.outputs</code> define function outputs. The parameter name is appended to the property name, and the value indicates the parameter's type.</p> <p>All the XC Scenario base types can be used : String, Number, Boolean.</p>"},{"location":"openfaas/synchronous/#new-handlerpy","title":"New handler.py","text":"<p>Replace the generated <code>handler.py</code> file with the following content:</p> <pre><code>import json\n\ndef handle(req):\n    \"\"\"handle a request to the function\n    Args:\n        req (str): request body\n    \"\"\"\n\n    # De-serialize json, extract input parameters\n    obj = json.loads(req)\n    n = int(obj['n'])\n    txt = obj['txt']\n\n    # Implement your function here\n    calc = 2*n\n    msg = txt.upper()\n\n    # Return the output parameters\n    result = {\n        'calc': calc,\n        'msg': msg,\n        }\n\n    return json.dumps(result)\n</code></pre> <p>XC Scenario calls the OpenFaas functions with a json request body containing the input parameters. The code de-serializes the json data and extracts the two input parameters.</p> <p>After this step, you can implement whatever processing your function needs to do. In our example, the numeric parameter gets multiplied by 2, and the string parameter is converted to uppercase.</p> <p>The final step in the code is to return a json string encoding the output parameters defined in the yaml file, so that XC Scenario can make them available as task outputs.</p>"},{"location":"openfaas/synchronous/#build-and-deploy-the-new-function","title":"Build and deploy the new function","text":"<p>Repeat the above steps to build the new <code>pyfunc2</code> function, upload its docker image to Docker Hub, and deploy it on the OpenFaas server.</p>"},{"location":"openfaas/synchronous/#test-the-new-function","title":"Test the new function","text":"<p>You can invoke the function from the command line as before; however, passing json strings is cumbersome, as all the double quotes must be escaped, so it's easier to put the input in a json file, let's call it <code>inputs.json</code>:</p> <pre><code>{\n    \"n\": 13,\n    \"txt\": \"hello\"\n}\n</code></pre> <p>The <code>-d</code> option to the <code>curl</code> command supports the <code>@</code> syntax to specify a file name, so the function can be invoke with the following command:</p> <pre><code>joao@debian1:~$ curl https://openfaas.xcomponent.com/function/pyfunc2 -d @inputs.json\n{\"calc\": 26, \"msg\": \"HELLO\"}\njoao@debian1:~$ \n</code></pre> <p>It can also be invoked through the OpenFaas portal as before:</p> <p></p>"},{"location":"openfaas/synchronous/#use-the-new-function-in-xc-scenario","title":"Use the new function in XC Scenario","text":"<p>As before, create a new scenario, add a task, pick the OpenFaas namespace, and select the <code>pyfunc2</code> function. The Task Inputs section shows the two input parameters <code>n</code> and <code>txt</code>:</p> <p></p> <p>Enter some values, then run the scenario and check the cockpit for the function output:</p> <p></p> <p>The output parameters display the results of the OpenFaas' function processing.</p>"}]}